<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2022-06-22T17:23:35-04:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">austinpursley.com</title><subtitle>Personal website of Austin Pursley.</subtitle><entry><title type="html">LaTeX Document Set-up with Python’s Jinja Template Engine</title><link href="http://localhost:4000/projects/py-jinja-build-latex.html" rel="alternate" type="text/html" title="LaTeX Document Set-up with Python’s Jinja Template Engine" /><published>2022-06-22T00:00:00-04:00</published><updated>2022-06-22T00:00:00-04:00</updated><id>http://localhost:4000/projects/py-jinja-build-latex</id><content type="html" xml:base="http://localhost:4000/projects/py-jinja-build-latex.html"><![CDATA[<p><img src="/assets/images/Calypte-anna-observed-by-Dario-Taraborelli.webp" alt="" />
<em>Hummingbirds are sorta associted with LaTeX <br /><a href="https://www.inaturalist.org/observations/71999354">(Calpyte anna, observed by Dario Taraborelli)</a>)</em></p>

<p>I’ve learned quite a bit about developing LaTeX documents for work. A somewhat tedious task is the initial set-up. For long documents, a good set-up is having a main TEX (e.g. main.TEX) file import numerous TEX files that correspond to the document sections. The introduction would be one TEX file, an appendix would be another TEX file, etc.</p>

<p>Starting a new project with this structure usually involves: copy+pasting a similar Overleaf project, add/removing content as needed, and making tweaks throughout the files so that everything is imported correctly, etc. After all that, then the meat-and-potatoes, the actual document content, can be added. I figured, anything that could be done to get to the good stuff faster, the better.</p>

<h1 id="overall-process--set-up">Overall Process / Set-up</h1>
<p><img src="/assets/images/jinja-build-latex.webp" alt="" />
The build.py is run. It uses data defined within its file and the .tpl files in the templates folder to build .TEX files. These .TEX files are written to the output directory. The files within the “includes” folder, those document files which are not generated by templates, will be copied as-is to the output directory.</p>

<p>If using Overleaf, these files can be zipped and uploaded as a new project.</p>

<h1 id="the-templates">The Templates</h1>
<p>There are two templates: one for the main file and one for sub file that are imported into the main file.</p>

<h2 id="maintpl">main.tpl</h2>
<p>This template starts like a typically LaTeX document set-up:</p>

<figure class="highlight"><pre><code class="language-latex" data-lang="latex"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
</pre></td><td class="code"><pre><span class="c">%===================================================================</span>
<span class="c">% PREAMBLE</span>
<span class="c">%===================================================================</span>

<span class="k">\documentclass</span><span class="p">{</span>myArticleClass<span class="p">}</span>

<span class="k">\title</span><span class="p">{</span>Generic Test Document<span class="p">}</span>
<span class="k">\author</span><span class="p">{</span>Austin Pursley<span class="p">}</span>

<span class="c">%===================================================================</span>
<span class="c">% MAIN DOCUMENT</span>
<span class="c">%===================================================================</span>
 
<span class="nt">\begin{document}</span>
<span class="k">\maketitle</span>
<span class="k">\pagenumbering</span><span class="p">{</span>roman<span class="p">}</span>	
<span class="c">%====================================</span>
<span class="c">% Table of Changes</span>
<span class="k">\clearpage</span>
<span class="k">\import</span><span class="p">{</span>Sections/<span class="p">}{</span>00a<span class="p">_</span>Introduction<span class="p">}</span>

<span class="c">%====================================</span>
<span class="c">% Tables of Contents, Tables, Figures...</span>
<span class="k">\clearpage</span>
<span class="k">\tableofcontents</span>
<span class="k">\newpage</span>
<span class="nt">\begin{center}</span>
<span class="k">\lhead</span><span class="p">{}</span>
<span class="k">\listoftables</span>
<span class="k">\newpage</span>
<span class="k">\listoffigures</span>
<span class="nt">\end{center}</span>
<span class="k">\clearpage</span>

<span class="k">\pagenumbering</span><span class="p">{</span>arabic<span class="p">}</span>
<span class="k">\glsresetall</span> <span class="c">% Resets the acronym markers from preamble</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The next part are the imports for the document sections. I knew that all I needed was the title of the sections to get started. From these, I could generate a filename for that section’s TEX file and a section label (more on that later).</p>

<p>The templating code itself is pretty straight forward. A for loop in the templating engine syntax, iterating over a dictionary object that holds the section data.</p>

<figure class="highlight"><pre><code class="language-latex" data-lang="latex"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="p">{</span><span class="c">% for s in sections -%}</span>
<span class="p">{</span><span class="c">%- set fn = "{" ~ s.filename ~ "}" -%}</span>
<span class="c">%====================================</span>
<span class="c">% {{ s.title }}</span>
<span class="k">\clearpage</span>
<span class="k">\import</span><span class="p">{</span>Sections/<span class="p">}{{</span> fn <span class="p">}}</span>

<span class="p">{</span><span class="c">% endfor -%}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The rest of the template add the remaining sections and does the same templating logic for appendices.</p>

<figure class="highlight"><pre><code class="language-latex" data-lang="latex"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="c">%====================================</span>
<span class="c">% References</span>
<span class="k">\clearpage</span>
<span class="k">\printbibliography</span><span class="na">[heading=bibnumbered,title={References}]</span>
    
<span class="c">%===================================================================</span>
<span class="c">% APPENDICES</span>
<span class="c">%===================================================================</span>

<span class="k">\clearpage</span>
<span class="k">\renewcommand</span><span class="p">{</span><span class="k">\appendixpagename</span><span class="p">}{</span><span class="k">\center</span><span class="p">{</span><span class="k">\Large</span><span class="p">{</span>Appendices<span class="p">}}}</span>
<span class="k">\appendix</span>
<span class="nt">\begin{appendices}</span>
<span class="k">\glsresetall</span> <span class="c">% Resets the acronym markers from main document</span>

<span class="p">{</span><span class="c">% for a in appendices -%}</span>
<span class="p">{</span><span class="c">%- set fn = "{" ~ a.filename ~ "}" -%}</span>
<span class="c">%====================================</span>
<span class="c">% {{ a.title }}</span>
<span class="k">\clearpage</span>
<span class="k">\import</span><span class="p">{</span>Appendices/<span class="p">}{{</span> fn <span class="p">}}</span>

<span class="p">{</span><span class="c">% endfor -%}</span>

<span class="c">%====================================</span>
<span class="c">% Glossaries</span>
<span class="k">\clearpage</span>
<span class="k">\printglossary</span><span class="na">[type=main,style=list]</span>
<span class="k">\printglossary</span><span class="na">[type=abbreviations, title={Acronyms}]</span>
<span class="nt">\end{appendices}</span>

<span class="nt">\end{document}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="subtpl">sub.tpl</h2>
<p>Sub files will use the template below. It’s essential a blank page, just a placeholder for this initial set-up.</p>

<figure class="highlight"><pre><code class="language-latex" data-lang="latex"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
</pre></td><td class="code"><pre><span class="p">{</span><span class="c">%- set title = "{" ~ title ~ "}" -%}</span>
<span class="p">{</span><span class="c">%- set label = "{" ~ label ~ "}" -%}</span>
<span class="k">\documentclass</span><span class="na">[class=myArticleClass, float=false, crop=false]</span><span class="p">{</span>standalone<span class="p">}</span>

<span class="c">%=====================================================================</span>
<span class="c">%  {{ title }}</span>
<span class="c">%=====================================================================</span>
<span class="nt">\begin{document}</span>
<span class="k">\section</span><span class="p">{{</span> title <span class="p">}}</span>
<span class="k">\label</span><span class="p">{{</span> label <span class="p">}}</span>
<span class="nt">\end{document}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="the-build-script">The Build Script</h1>
<p>First, the directories are set-up.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
</pre></td><td class="code"><pre><span class="n">out_dir</span> <span class="o">=</span> <span class="s">"out_doc_0/"</span>
<span class="n">remove_tree</span><span class="p">(</span><span class="n">out_dir</span><span class="p">)</span>
<span class="n">Path</span><span class="p">(</span><span class="n">out_dir</span><span class="p">).</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">sec_dir</span> <span class="o">=</span> <span class="n">out_dir</span> <span class="o">+</span> <span class="s">"Sections/"</span>
<span class="n">apx_dir</span> <span class="o">=</span> <span class="n">out_dir</span> <span class="o">+</span> <span class="s">"Appendices/"</span>
<span class="n">Path</span><span class="p">(</span><span class="n">sec_dir</span><span class="p">).</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">Path</span><span class="p">(</span><span class="n">apx_dir</span><span class="p">).</span><span class="n">mkdir</span><span class="p">(</span><span class="n">exist_ok</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Next, the section and appendix data is set-up. Note how only the title names are needed to start with. From these, filenames and labels can be generated.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="c1"># list of document main body document sections and appendices
</span><span class="n">section_titles</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Hipster Ipsum"</span><span class="p">,</span> <span class="s">"Taco Wayfarers"</span><span class="p">]</span>
<span class="n">appendix_titles</span> <span class="o">=</span> <span class="p">[</span><span class="s">"Banjo Greenjuice"</span><span class="p">,</span> <span class="s">"Roof Bar Chia Seeds"</span><span class="p">,</span>
                   <span class="s">"Mumblecore Distillery"</span><span class="p">]</span>

<span class="c1"># build up data from input
</span><span class="n">sections</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">title</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">section_titles</span><span class="p">):</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="nb">str</span><span class="p">(</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">).</span><span class="n">zfill</span><span class="p">(</span><span class="mi">2</span><span class="p">)</span> <span class="o">+</span> <span class="s">"_"</span> <span class="o">+</span> <span class="n">title</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
    <span class="n">label</span> <span class="o">=</span> <span class="s">"s"</span> <span class="o">+</span> <span class="n">str2acronym</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    <span class="n">sections</span><span class="p">.</span><span class="n">append</span><span class="p">({</span><span class="s">"title"</span> <span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="s">"filename"</span> <span class="p">:</span> <span class="n">filename</span><span class="p">,</span> <span class="s">"label"</span> <span class="p">:</span> <span class="n">label</span><span class="p">})</span>
    
<span class="n">appendices</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">cnt</span><span class="p">,</span> <span class="n">title</span> <span class="ow">in</span> <span class="nb">enumerate</span><span class="p">(</span><span class="n">appendix_titles</span><span class="p">):</span>
    <span class="n">filename</span> <span class="o">=</span> <span class="n">int2alpha</span><span class="p">(</span><span class="n">cnt</span><span class="o">+</span><span class="mi">1</span><span class="p">)</span> <span class="o">+</span> <span class="s">"_"</span> <span class="o">+</span> <span class="n">title</span><span class="p">.</span><span class="n">replace</span><span class="p">(</span><span class="s">" "</span><span class="p">,</span> <span class="s">""</span><span class="p">)</span>
    <span class="n">label</span> <span class="o">=</span> <span class="s">"a"</span> <span class="o">+</span> <span class="n">str2acronym</span><span class="p">(</span><span class="n">title</span><span class="p">)</span>
    <span class="n">appendices</span><span class="p">.</span><span class="n">append</span><span class="p">({</span><span class="s">"title"</span> <span class="p">:</span> <span class="n">title</span><span class="p">,</span> <span class="s">"filename"</span> <span class="p">:</span> <span class="n">filename</span><span class="p">,</span> <span class="s">"label"</span> <span class="p">:</span> <span class="n">label</span><span class="p">})</span>
<span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">"sections"</span> <span class="p">:</span> <span class="n">sections</span><span class="p">,</span>
        <span class="s">"appendices"</span> <span class="p">:</span> <span class="n">appendices</span><span class="p">}</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then TEX files are created from templates and the data using Jinja.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
</pre></td><td class="code"><pre><span class="c1"># set-up Jinja template environment
</span><span class="n">templateLoader</span> <span class="o">=</span> <span class="n">jinja2</span><span class="p">.</span><span class="n">FileSystemLoader</span><span class="p">(</span><span class="n">searchpath</span><span class="o">=</span><span class="s">"templates/"</span><span class="p">)</span>
<span class="n">templateEnv</span> <span class="o">=</span> <span class="n">jinja2</span><span class="p">.</span><span class="n">Environment</span><span class="p">(</span><span class="n">loader</span><span class="o">=</span><span class="n">templateLoader</span><span class="p">)</span>
<span class="n">main_temp</span> <span class="o">=</span> <span class="n">templateEnv</span><span class="p">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">"main.tpl"</span><span class="p">)</span>
<span class="n">sub_temp</span> <span class="o">=</span> <span class="n">templateEnv</span><span class="p">.</span><span class="n">get_template</span><span class="p">(</span><span class="s">"sub.tpl"</span><span class="p">)</span>
<span class="c1"># render templates
</span><span class="n">main_TEX</span> <span class="o">=</span> <span class="p">(</span><span class="n">main_temp</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
<span class="n">p</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">out_dir</span> <span class="o">+</span> <span class="s">"main.TEX"</span><span class="p">)</span>
<span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
    <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">main_TEX</span><span class="p">)</span>

<span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">sections</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">"title"</span> <span class="p">:</span> <span class="n">s</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
            <span class="s">"label"</span> <span class="p">:</span> <span class="n">s</span><span class="p">[</span><span class="s">"label"</span><span class="p">]}</span>
    <span class="n">sub_TEX</span> <span class="o">=</span> <span class="p">(</span><span class="n">sub_temp</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">sec_dir</span> <span class="o">+</span> <span class="n">s</span><span class="p">[</span><span class="s">"filename"</span><span class="p">]</span> <span class="o">+</span> <span class="s">".TEX"</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">sub_TEX</span><span class="p">)</span>
        
<span class="k">for</span> <span class="n">a</span> <span class="ow">in</span> <span class="n">appendices</span><span class="p">:</span>
    <span class="n">data</span> <span class="o">=</span> <span class="p">{</span><span class="s">"title"</span> <span class="p">:</span> <span class="n">a</span><span class="p">[</span><span class="s">"title"</span><span class="p">],</span>
            <span class="s">"label"</span> <span class="p">:</span> <span class="n">a</span><span class="p">[</span><span class="s">"label"</span><span class="p">]}</span>
    <span class="n">sub_TEX</span> <span class="o">=</span> <span class="p">(</span><span class="n">sub_temp</span><span class="p">.</span><span class="n">render</span><span class="p">(</span><span class="n">data</span><span class="p">))</span>
    <span class="n">p</span> <span class="o">=</span> <span class="n">Path</span><span class="p">(</span><span class="n">apx_dir</span> <span class="o">+</span> <span class="n">a</span><span class="p">[</span><span class="s">"filename"</span><span class="p">]</span> <span class="o">+</span> <span class="s">".TEX"</span><span class="p">)</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">p</span><span class="p">,</span> <span class="s">'w'</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="n">f</span><span class="p">.</span><span class="n">write</span><span class="p">(</span><span class="n">sub_TEX</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Finally, the files from the “includes” folder are copied to the output directory (copy/remove tree functions coming from distutils.dir_util).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="c1"># copy "include" files
</span><span class="n">src_path</span> <span class="o">=</span> <span class="s">'includes'</span>
<span class="n">trg_path</span> <span class="o">=</span> <span class="n">out_dir</span>
<span class="n">copy_tree</span><span class="p">(</span><span class="n">src_path</span><span class="p">,</span> <span class="n">trg_path</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h1 id="result">Result</h1>
<p>The PDF output result can be seen <a href="/assets/out_doct_0.pdf">here</a>.</p>

<p><a href="https://github.com/austinpursley/py-jinja-build-latex-doc">GitHub</a> for the code.</p>]]></content><author><name></name></author><category term="projects" /><category term="project" /><category term="programming" /><summary type="html"><![CDATA[Hummingbirds are sorta associted with LaTeX (Calpyte anna, observed by Dario Taraborelli))]]></summary></entry><entry><title type="html">Static Site Generation with Jekyll</title><link href="http://localhost:4000/projects/jekyll.html" rel="alternate" type="text/html" title="Static Site Generation with Jekyll" /><published>2022-06-15T00:00:00-04:00</published><updated>2022-06-15T00:00:00-04:00</updated><id>http://localhost:4000/projects/jekyll</id><content type="html" xml:base="http://localhost:4000/projects/jekyll.html"><![CDATA[<p><img src="/assets/images/dalle-mini-jekyll-making-a-website.webp" alt="" />
<em>Late train Jekyll + bandwagon DALL·E</em></p>

<p>I have started using a static site generator for this website, Jekyll. Before I was just editing HTML and CSS files, plus a <a href="/projects/html_page_autom_python.html">bit of Python</a>. Creating a website “from scratch” that way had a simplicity that appealed to me, even if I was re-inventing the wheel sometimes. But static site generators are so commonplace and easy, it was only a matter of time that I switched to one.</p>

<p>Overall, I was happy I switched. Using Liquid templates and layouts are nice, altough nested layouts can feel like a headache sometimes. Writing posts in Markdown is probably my favorite feature so far (not that MD-&gt;HTML is unique to Jekyll). Creating pages or indexes from data files is also a breeze.</p>

<p>However, one feature I was sorely missing was extensive pagination. I wanted to paginate <a href="/content/scroll1.html">content</a>, tags, and categories, but it turns out Jekyll (by default) can only paginate posts. I did quite a bit of research and testing of multiple work arounds, inlcluding plug-ins, combining two Jekyll blogs into one, making everything posts, and even new static site builders. By the time I figured a plug-in would probably be the best solution, I was too weary to figure one out. So for now, I’m using a hybrid of Jekyll’s tools and Python for pagination of that section.</p>

<p>I also reset the style to a blank canvas, white background and black text, as I consider what the next look will be.</p>

<p><img src="/assets/images/2022-06-15-jekyll-site-home.webp" alt="" />
<em>What the homepage looks like right now.</em></p>]]></content><author><name></name></author><category term="projects" /><category term="project" /><category term="programming" /><summary type="html"><![CDATA[Late train Jekyll + bandwagon DALL·E]]></summary></entry><entry><title type="html">And Serve You French Toast (Data) Again, Part 2: Quantities</title><link href="http://localhost:4000/projects/french_toast_data_analysis_1.html" rel="alternate" type="text/html" title="And Serve You French Toast (Data) Again, Part 2: Quantities" /><published>2022-05-23T00:00:00-04:00</published><updated>2022-05-23T00:00:00-04:00</updated><id>http://localhost:4000/projects/french_toast_data_analysis_1</id><content type="html" xml:base="http://localhost:4000/projects/french_toast_data_analysis_1.html"><![CDATA[<div style="display:flex; flex-wrap:nowrap;text-align:center; width:100%;">
  <p><span style="width:19%;display:inline-block"> <img src="/assets/images/egg2.gif" alt="" /> </span>
<span style="width:19%;display:inline-block"> <img src="/assets/images/bread1.gif" alt="" /> </span> 
<span style="width:19%;display:inline-block"> <img src="/assets/images/milk.gif" alt="" /> </span> 
<span style="width:19%;display:inline-block"> <img src="/assets/images/bread1.gif" alt="" /> </span> 
<span style="width:19%;display:inline-block"> <img src="/assets/images/egg2.gif" alt="" /> </span></p>
</div>

<p>Here my goal is to do some light analysis and data viz of the ingredient quantities from the
 <a href="/projects/french_toast_data_analysis_0.html">allrecipes.com french toast recipe data</a> 
 I gathered.</p>

<h2 id="normalizing-the-units">Normalizing the units</h2>

<p>I would like to focus in on bread, eggs, and milk/cream. Obviously, there is variation in what units of measurements the recipes call for, so I tried my best to make the units as congruent as possible.</p>

<p>Start with opening the CSV data as a Pandas dataframe.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
</pre></td><td class="code"><pre><span class="n">ft_recipes</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"french_toast_recipes_cleaned_final.csv"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">na_filter</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> 
<span class="n">ft_recipes</span><span class="p">[</span><span class="s">"quant"</span><span class="p">]</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">to_numeric</span><span class="p">(</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"quant"</span><span class="p">])</span>
<span class="n">ft_recipes_vc</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">[</span><span class="s">"title"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>First I tackled the bread. As you might expect, most of the recipes did not give explicit quantites of bread. Only a handful specify a 1 pound loaf of bread, and even fewer of those specific the width of slides. And that makes sense, bread comes in all shapes and sizes and it would be a bit silly if a recipe called for 450g of bread or whatever. And really, the exact bread quanity for this doesn’t matter too much. The way I figure it, you just need enough bread to soak up the custard, and that custard and the following cooking techniques are more important to the outcome. I just focused on recipes that called for “slices”.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
</pre></td><td class="code"><pre><span class="c1">## Normalizing the units
# bread
</span><span class="n">b</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"bread"</span><span class="p">].</span><span class="n">copy</span><span class="p">()</span>
<span class="n">b</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">b</span><span class="p">[</span><span class="s">"units"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"slices"</span><span class="p">,</span> <span class="p">[</span><span class="s">"bread slices"</span><span class="p">]]</span> <span class="o">=</span> <span class="n">b</span><span class="p">[</span><span class="s">"quant"</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>For eggs, I wanted one column for whole eggs and one for eggs in fluid ounces. For fluid ounces, I assumed each egg is equivalent to 1.7 fluid ounces (supposed equivalent of a large egg).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="c1"># eggs
</span><span class="n">e</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"eggs"</span><span class="p">].</span><span class="n">copy</span><span class="p">()</span>
<span class="c1"># wolframalpha: 1.7 fluid ounces from a large egg
</span><span class="n">e</span><span class="p">.</span><span class="n">loc</span><span class="p">[(</span><span class="n">e</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"eggs"</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">e</span><span class="p">[</span><span class="s">"units"</span><span class="p">]</span> <span class="o">!=</span> <span class="s">"cups"</span><span class="p">),</span> <span class="p">[</span><span class="s">"eggs (fl oz)"</span><span class="p">]]</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="s">"quant"</span><span class="p">]</span> <span class="o">*</span> <span class="mf">1.7</span> 
<span class="n">e</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">e</span><span class="p">[</span><span class="s">"units"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"cups"</span><span class="p">,</span> <span class="p">[</span><span class="s">"eggs (fl oz)"</span><span class="p">]]</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="s">"quant"</span><span class="p">]</span> <span class="o">*</span> <span class="mi">8</span>
<span class="n">e</span><span class="p">[</span><span class="s">"eggs (whole #)"</span><span class="p">]</span> <span class="o">=</span> <span class="n">e</span><span class="p">[</span><span class="s">"eggs (fl oz)"</span><span class="p">]</span> <span class="o">/</span> <span class="mf">1.7</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Milk is easy, just a conversion to fluid ounces.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="c1"># milk
</span><span class="n">m</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"milkcream"</span><span class="p">].</span><span class="n">copy</span><span class="p">()</span>
<span class="n">m</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">m</span><span class="p">[</span><span class="s">"units"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"cups"</span><span class="p">,</span> <span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">]]</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="s">"quant"</span><span class="p">]</span> <span class="o">*</span> <span class="mi">8</span>
<span class="n">m</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">m</span><span class="p">[</span><span class="s">"units"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"tablespoons"</span><span class="p">,</span> <span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">]]</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="s">"quant"</span><span class="p">]</span> <span class="o">*</span> <span class="mi">2</span>
<span class="n">m</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">m</span><span class="p">[</span><span class="s">"units"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"teaspoons"</span><span class="p">,</span> <span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">]]</span> <span class="o">=</span> <span class="n">m</span><span class="p">[</span><span class="s">"quant"</span><span class="p">]</span> <span class="o">*</span> <span class="mf">0.1667</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Finally, I group the rows into a “normalized” dataframe with a total of 86 recipes.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="n">norm</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">concat</span><span class="p">([</span><span class="n">b</span><span class="p">,</span><span class="n">e</span><span class="p">,</span><span class="n">m</span><span class="p">])</span>
<span class="n">norm</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"bread slices"</span><span class="p">,</span> <span class="s">"eggs (fl oz)"</span><span class="p">,</span> <span class="s">"milk/cream (fl oz)"</span><span class="p">]]</span>
<span class="n">norm</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">"title"</span><span class="p">,</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="n">agg</span><span class="p">(</span><span class="s">"first"</span><span class="p">)</span>

<span class="c1"># check that each recipe has only one bread, egg, milk/cream
</span><span class="n">norm_cnt</span> <span class="o">=</span> <span class="n">norm</span><span class="p">.</span><span class="n">groupby</span><span class="p">(</span><span class="s">"title"</span><span class="p">,</span> <span class="n">as_index</span><span class="o">=</span><span class="bp">False</span><span class="p">).</span><span class="n">agg</span><span class="p">(</span><span class="s">"count"</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french-toast-norm.webp" alt="" />
<em>Dataframe of normalized units.</em></p>

<h2 id="basic-stats">Basic Stats</h2>

<p>A quick look at some basic stats of the recipes (and a demo of turning a dataframe into a table with matplotlib).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
</pre></td><td class="code"><pre><span class="c1">#############################################
# basic stats
#############################################
</span><span class="n">bread</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"bread"</span><span class="p">]</span>
<span class="n">bread</span> <span class="o">=</span> <span class="n">bread</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'ingr'</span><span class="p">])</span>
<span class="n">bread_vc</span> <span class="o">=</span> <span class="n">bread</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"category"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">bread_grp</span> <span class="o">=</span> <span class="n">bread</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">,</span><span class="s">'category'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="s">' and '</span><span class="p">.</span><span class="n">join</span><span class="p">).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">bread_cnt</span> <span class="o">=</span> <span class="n">bread_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>

<span class="n">mlk</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"milkcream"</span><span class="p">]</span>
<span class="n">mlk</span> <span class="o">=</span> <span class="n">mlk</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'ingr'</span><span class="p">])</span>
<span class="n">mlk_vc</span> <span class="o">=</span> <span class="n">mlk</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"category"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">mlk_grp</span> <span class="o">=</span> <span class="n">mlk</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">,</span><span class="s">'category'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="s">' and '</span><span class="p">.</span><span class="n">join</span><span class="p">).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">mlk_cnt</span> <span class="o">=</span> <span class="n">mlk_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>

<span class="n">egg</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"eggs"</span><span class="p">]</span>
<span class="n">egg</span> <span class="o">=</span> <span class="n">egg</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'ingr'</span><span class="p">])</span>
<span class="n">egg_vc</span> <span class="o">=</span> <span class="n">egg</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"category"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">egg_grp</span> <span class="o">=</span> <span class="n">egg</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">,</span><span class="s">'category'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="s">' and '</span><span class="p">.</span><span class="n">join</span><span class="p">).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">egg_cnt</span> <span class="o">=</span> <span class="n">egg_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>

<span class="n">recipe_cnt</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"title"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">())</span>
<span class="n">ingr_type_cnt</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">())</span>
<span class="n">ingr_num_min</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="n">count</span><span class="p">().</span><span class="nb">min</span><span class="p">()</span>
<span class="n">ingr_num_max</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="n">count</span><span class="p">().</span><span class="nb">max</span><span class="p">()</span>
<span class="n">ingr_num_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">ft_recipes</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="n">count</span><span class="p">().</span><span class="n">mean</span><span class="p">(),</span><span class="mi">2</span><span class="p">)</span>

<span class="n">bread_type_cnt</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">bread_cnt</span><span class="p">)</span> 
<span class="n">bread_slc_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">norm</span><span class="p">[</span><span class="s">"bread slices"</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span><span class="mi">1</span><span class="p">)</span>
<span class="n">milk_type_cnt</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlk_cnt</span><span class="p">)</span>
<span class="n">milk_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">norm</span><span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span><span class="mi">1</span><span class="p">)</span>
<span class="n">egg_type_cnt</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">egg_cnt</span><span class="p">)</span>
<span class="n">egg_mean</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="nb">round</span><span class="p">(</span><span class="n">norm</span><span class="p">[</span><span class="s">"eggs (whole #)"</span><span class="p">].</span><span class="n">mean</span><span class="p">(),</span><span class="mi">2</span><span class="p">)</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">()</span>
<span class="n">df</span><span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">append</span><span class="p">({</span><span class="s">'# of Recipes'</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">recipe_cnt</span><span class="p">),</span> 
               <span class="s">'# of Ingredient Types'</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">ingr_type_cnt</span><span class="p">),</span> 
               <span class="s">'Highest Ingredient Count'</span> <span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">ingr_num_max</span><span class="p">),</span>
               <span class="s">'Lowest Ingredient Count'</span><span class="p">:</span> <span class="nb">str</span><span class="p">(</span><span class="n">ingr_num_min</span><span class="p">),</span>
               <span class="s">'Mean Ingredient Count'</span><span class="p">:</span> <span class="n">ingr_num_mean</span><span class="p">,</span>
               <span class="s">'Bread (slices) Mean'</span> <span class="p">:</span> <span class="n">bread_slc_mean</span><span class="p">,</span>
               <span class="s">'Milk (fl oz) Mean'</span> <span class="p">:</span> <span class="n">milk_mean</span><span class="p">,</span>
               <span class="s">'Egg (count) Mean'</span> <span class="p">:</span> <span class="n">egg_mean</span>
               <span class="p">},</span> 
              <span class="n">ignore_index</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">T</span><span class="p">.</span><span class="n">reset_index</span><span class="p">()</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">()</span>
<span class="c1"># hide axes
</span><span class="n">fig</span><span class="p">.</span><span class="n">patch</span><span class="p">.</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'off'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'tight'</span><span class="p">)</span>
<span class="n">table</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">table</span><span class="p">(</span><span class="n">cellText</span><span class="o">=</span><span class="n">df</span><span class="p">.</span><span class="n">values</span><span class="p">,</span> <span class="n">loc</span><span class="o">=</span><span class="s">'center'</span><span class="p">,</span> <span class="n">cellLoc</span><span class="o">=</span><span class="s">'left'</span><span class="p">,</span> <span class="n">colWidths</span><span class="o">=</span><span class="p">[</span><span class="mf">0.5</span><span class="p">,</span><span class="mf">0.1</span><span class="p">])</span>
<span class="n">fig</span><span class="p">.</span><span class="n">tight_layout</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'2_analysis/french-toast-basic-stats_tbl.webp'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french-toast-basic-stats_tbl.webp" alt="" /></p>

<h2 id="visualizing-ingredient-quantities">Visualizing Ingredient Quantities</h2>

<p>I can now visualize the “spread” of data for each of the core ingredients using histograms. Note though that this is not complete, e.g. the bread plot is only for recipes that called for X number of slices.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
</pre></td><td class="code"><pre><span class="c1">#############################################
# histograms for bread, egg, milk
#############################################
# colors
</span><span class="n">colors</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">'tab20b'</span><span class="p">,</span> <span class="mi">20</span><span class="p">).</span><span class="n">colors</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>
<span class="n">c4</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span>
                        <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">4</span><span class="p">,</span><span class="mi">6</span><span class="p">),</span> <span class="n">constrained_layout</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'axes'</span><span class="p">,</span> <span class="n">labelsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>    <span class="c1"># fontsize of the x and y labels
</span><span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'legend'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>    <span class="c1"># legend fontsize
</span><span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'figure'</span><span class="p">,</span> <span class="n">titlesize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>  <span class="c1"># fontsize of the figure title
</span>
<span class="n">ax</span> <span class="o">=</span> <span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">n_bins</span> <span class="o">=</span> <span class="mi">14</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">norm</span><span class="p">[</span><span class="s">"bread slices"</span><span class="p">],</span> <span class="n">bins</span><span class="o">=</span><span class="n">n_bins</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="n">c1</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="n">c4</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">28</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Bread Slices'</span><span class="p">)</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"bread slices"</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axvline</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"mean"</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">'r'</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="s">'dashed'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">axs</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">n_bins</span> <span class="o">=</span> <span class="mi">13</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">norm</span><span class="p">[</span><span class="s">"eggs (whole #)"</span><span class="p">],</span> <span class="n">bins</span><span class="o">=</span><span class="n">n_bins</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="n">c2</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="n">c4</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">28</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">ticks</span><span class="o">=</span><span class="p">[</span><span class="mi">1</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="mi">5</span><span class="p">,</span><span class="mi">7</span><span class="p">,</span><span class="mi">9</span><span class="p">,</span><span class="mi">11</span><span class="p">,</span><span class="mi">13</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Eggs #'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'# of French Toast Recipes'</span><span class="p">)</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"eggs (whole #)"</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axvline</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"mean"</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">'r'</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="s">'dashed'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">ax</span> <span class="o">=</span> <span class="n">axs</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span>
<span class="n">n_bins</span> <span class="o">=</span> <span class="mi">16</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">norm</span><span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">],</span> <span class="n">bins</span><span class="o">=</span><span class="n">n_bins</span><span class="p">,</span> <span class="n">facecolor</span><span class="o">=</span><span class="n">c3</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="n">c4</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">28</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlabel</span><span class="p">(</span><span class="s">'Milk/cream (fl oz)'</span><span class="p">)</span>
<span class="n">m</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">].</span><span class="n">mean</span><span class="p">()</span>
<span class="n">ax</span><span class="p">.</span><span class="n">axvline</span><span class="p">(</span><span class="n">m</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"mean"</span><span class="p">,</span> <span class="n">color</span> <span class="o">=</span> <span class="s">'r'</span><span class="p">,</span> <span class="n">linestyle</span> <span class="o">=</span> <span class="s">'dashed'</span><span class="p">,</span> <span class="n">linewidth</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>

<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'2_analysis/french-toast-hist-essn-ingr2.webp'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french-toast-hist-essn-ingr2.webp" alt="" />
<em>Histograms of essential ingredients.</em></p>

<h2 id="egg-to-milk-ratios">Egg to Milk Ratios</h2>

<p>According to
 <a href="https://www.seriouseats.com/perfect-quick-easy-french-toast">Serious Eats</a> 
 , an ideal ratio for the french toast custard is 3 eggs for every 1 cup of milk. Having tried this ratio myself, I can say it “seems alright to me”. Let’s see how these recipes line up with that.</p>

<p>Line to calculate the ratio:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio"</span><span class="p">]</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"eggs (fl oz)"</span><span class="p">]</span> <span class="o">/</span> <span class="n">norm</span><span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">]</span> 
<span class="n">e2m_vc</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>And we can do a quick plot of the data.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">e2m_vc</span><span class="p">.</span><span class="n">index</span><span class="p">,</span> <span class="n">e2m_vc</span><span class="p">,</span> <span class="n">width</span><span class="o">=</span><span class="mf">0.25</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Egg-to-Milk Ratio'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'# of French Toast Recipes'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">vlines</span><span class="p">(</span><span class="mf">0.6375</span>  <span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="s">"gray"</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'dashed'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"standard 3 eggs : 1 cup milk"</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'2_analysis/french-toast-egg2milk-ratio-bar1.webp'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french-toast-egg2milk-ratio-bar1.webp" alt="" />
<em>Initial bar chart of french toast recipe egg-to-milk ratios.</em></p>

<p>This gives us sense that there is a cluster around 3 or 4 eggs for every cup of milk. However, this graph could be better. Let’s start over (inside scoop into the learning process here).</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
</pre></td><td class="code"><pre><span class="c1"># BAR CHART
# set-up data
</span><span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio"</span><span class="p">]</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"eggs (fl oz)"</span><span class="p">]</span> <span class="o">/</span> <span class="n">norm</span><span class="p">[</span><span class="s">"milk/cream (fl oz)"</span><span class="p">]</span>
<span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio, # eggs to 1 cup milk"</span><span class="p">]</span> <span class="o">=</span> <span class="p">(</span><span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio"</span><span class="p">]</span> <span class="o">/</span> <span class="mf">1.7</span><span class="p">)</span> <span class="o">*</span> <span class="mi">8</span>
<span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio, # eggs to 1 cup milk"</span><span class="p">]</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio, # eggs to 1 cup milk"</span><span class="p">].</span><span class="nb">round</span><span class="p">(</span><span class="n">decimals</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>
<span class="n">e2m_vc</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio, # eggs to 1 cup milk"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">e2m_vc</span> <span class="o">=</span> <span class="n">e2m_vc</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'index'</span><span class="p">])</span>
<span class="c1"># figure, font size
</span><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">14</span><span class="p">,</span><span class="mi">8</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'axes'</span><span class="p">,</span> <span class="n">labelsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>    <span class="c1"># fontsize of the x and y labels
</span><span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'legend'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">)</span>    <span class="c1"># legend fontsize
</span><span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'figure'</span><span class="p">,</span> <span class="n">titlesize</span><span class="o">=</span><span class="mi">16</span><span class="p">)</span>  <span class="c1"># fontsize of the figure title
# colors
</span><span class="n">colors</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">'tab20b'</span><span class="p">,</span> <span class="mi">20</span><span class="p">).</span><span class="n">colors</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">17</span><span class="p">]</span>
<span class="c1"># data x and y axis
</span><span class="n">x</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="nb">len</span><span class="p">(</span><span class="n">e2m_vc</span><span class="p">[</span><span class="s">"index"</span><span class="p">]))</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">e2m_vc</span><span class="p">[</span><span class="s">"e2m ratio, # eggs to 1 cup milk"</span><span class="p">]</span>
<span class="c1"># x axis ticks
</span><span class="n">plt</span><span class="p">.</span><span class="n">xticks</span><span class="p">(</span><span class="n">ticks</span><span class="o">=</span><span class="n">x</span><span class="p">,</span><span class="n">labels</span><span class="o">=</span><span class="n">e2m_vc</span><span class="p">[</span><span class="s">"index"</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">bar</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">y</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">c1</span><span class="p">)</span>
<span class="c1"># labels
</span><span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Eggs to 1 cup Milk Ratio'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'# of French Toast Recipes'</span><span class="p">)</span> 
<span class="n">plt</span><span class="p">.</span><span class="n">vlines</span><span class="p">(</span><span class="mi">7</span> <span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">c2</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'dashed'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"Serious Eat's 3 eggs : 1 cup milk"</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">2.25</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">vlines</span><span class="p">(</span><span class="mi">10</span> <span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="mi">16</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">c3</span><span class="p">,</span> <span class="n">linestyle</span><span class="o">=</span><span class="s">'dashed'</span><span class="p">,</span> <span class="n">label</span><span class="o">=</span><span class="s">"~eggs = milk"</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">2.25</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">legend</span><span class="p">()</span>
<span class="c1"># save as an image
</span><span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'2_analysis/french-toast-egg2milk-ratio-bar2.webp'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french-toast-egg2milk-ratio-bar2.webp" alt="" />
<em>Bar chart of french toast recipe egg-to-milk ratios (looking better)</em></p>

<p>This plot more clearly shows the count for each ratio. And, look at that, it turns out that 4 eggs to 1 cup is seen more often among these recipes, as opposed to Serious Eats’ reccomendation. Who’s to say why this is.</p>

<p>Of course, other recipes have much higher ratios. These are cases where a little bit of milk is called for, perhaps they were going for something for more savory / eggy. We can cut out some of these cases where little milk is used, and then try out a histogram.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="c1"># HIST
# set-up data
</span><span class="n">e2m_cut</span> <span class="o">=</span> <span class="n">norm</span><span class="p">[</span><span class="n">norm</span><span class="p">[</span><span class="s">"e2m ratio, # eggs to 1 cup milk"</span><span class="p">]</span> <span class="o">&lt;</span> <span class="mi">12</span><span class="p">]</span>
<span class="c1"># plot
</span><span class="n">plt</span><span class="p">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">5</span><span class="p">))</span>
<span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'axes'</span><span class="p">,</span> <span class="n">labelsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>    <span class="c1"># fontsize of the x and y labels
</span><span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'legend'</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>    <span class="c1"># legend fontsize
</span><span class="n">plt</span><span class="p">.</span><span class="n">rc</span><span class="p">(</span><span class="s">'figure'</span><span class="p">,</span> <span class="n">titlesize</span><span class="o">=</span><span class="mi">12</span><span class="p">)</span>  <span class="c1"># fontsize of the figure title
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">axes</span><span class="p">()</span>
<span class="n">n_bins</span> <span class="o">=</span> <span class="mi">11</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">hist</span><span class="p">(</span><span class="n">e2m_cut</span><span class="p">[</span><span class="s">"e2m ratio, # eggs to 1 cup milk"</span><span class="p">],</span> <span class="n">bins</span><span class="o">=</span><span class="n">n_bins</span><span class="p">,</span> <span class="n">facecolor</span> <span class="o">=</span> <span class="n">c2</span><span class="p">,</span> <span class="n">edgecolor</span><span class="o">=</span><span class="n">c4</span><span class="p">,</span> <span class="n">linewidth</span><span class="o">=</span><span class="mf">0.5</span><span class="p">)</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">ticks</span><span class="o">=</span><span class="n">np</span><span class="p">.</span><span class="n">arange</span><span class="p">(</span><span class="mi">0</span><span class="p">,</span><span class="mi">12</span><span class="p">))</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_ylim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span> <span class="mi">24</span><span class="p">])</span>
<span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'Eggs to 1 cup Milk Ratio'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'# of French Toast Recipes'</span><span class="p">)</span>
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'2_analysis/french-toast-egg2milk-ratio-hist1.webp'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french-toast-egg2milk-ratio-hist1.webp" alt="" />
<em>Histogram of egg-to-milk ratios (subset of data).</em></p>

<p>Nice.</p>

<p><a href="/projects/french_toast_data_analysis_0.html">Part 1</a></p>

<p><a href="/projects/french_toast_data_analysis_2.html">Part 3</a></p>

<p><a href="https://github.com/austinpursley/french-toast-data-analysis">GitHub code</a></p>]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[]]></summary></entry><entry><title type="html">And Serve You French Toast (Data) Again, Part 3: Ingredients</title><link href="http://localhost:4000/projects/french_toast_data_analysis_2.html" rel="alternate" type="text/html" title="And Serve You French Toast (Data) Again, Part 3: Ingredients" /><published>2022-05-23T00:00:00-04:00</published><updated>2022-05-23T00:00:00-04:00</updated><id>http://localhost:4000/projects/french_toast_data_analysis_2</id><content type="html" xml:base="http://localhost:4000/projects/french_toast_data_analysis_2.html"><![CDATA[<p>Here my goal is to visualize the variety and number of ingredients used among the
 <a href="/projects/french_toast_data_analysis_0.html">allrecipes.com french toast recipe data</a> 
 I gathered.</p>

<h2 id="pie-charts">Pie Charts</h2>

<p><img src="/assets/images/thatsamore.webp" alt="" /></p>

<p>For the three “essential” ingredients, I wanted visualize all the unique variants. My first instinct was to do pie charts. However, in trying to make pie charts, I learned that (1) they are a pain to make and (2) they are also apperently
 <a href="https://scc.ms.unimelb.edu.au/resources/data-visualisation-and-exploration/no_pie-charts?utm_source=pocket_mylist">not that great</a> 
 for data visualization either.</p>

<p>Even though I am now not a fan, I will still include them here due to sunk costs and all that.</p>

<p>I experimented with a few different pi chart styles.</p>

<p><img src="/assets/images/french_toast_pie_plot_exp.webp" alt="" /></p>

<p>And I finally settled for style below. First, I’ll include portion of code:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
</pre></td><td class="code"><pre><span class="n">ft_recipes</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"french_toast_recipes_cleaned_final.csv"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">na_filter</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> 

<span class="c1">###############################################################################
###############################################################################
# PI CHART DIFFERENT INGREDIENTS
###############################################################################
###############################################################################
</span><span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span> <span class="mi">15</span><span class="p">),</span> <span class="n">subplot_kw</span><span class="o">=</span><span class="nb">dict</span><span class="p">(</span><span class="n">aspect</span><span class="o">=</span><span class="s">"equal"</span><span class="p">),</span>
                        <span class="n">constrained_layout</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="c1"># adjust title position to not be slightly off center
</span><span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">fig</span><span class="p">.</span><span class="n">subplotpars</span><span class="p">.</span><span class="n">right</span> <span class="o">+</span> <span class="n">fig</span><span class="p">.</span><span class="n">subplotpars</span><span class="p">.</span><span class="n">left</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span> <span class="o">+</span> <span class="mf">0.03</span> 
<span class="n">fig</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">"French Toast Recipes, Essential Ingredient Types"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">32</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">mid</span><span class="p">)</span>
<span class="c1">#############################################
# Pie Chart Bread
#############################################
</span><span class="n">pie_ax</span> <span class="o">=</span> <span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">bread</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"bread"</span><span class="p">]</span>
<span class="n">bread</span> <span class="o">=</span> <span class="n">bread</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'ingr'</span><span class="p">])</span>
<span class="n">bread_vc</span> <span class="o">=</span> <span class="n">bread</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"category"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">bread_grp</span> <span class="o">=</span> <span class="n">bread</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">,</span><span class="s">'category'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="s">' and '</span><span class="p">.</span><span class="n">join</span><span class="p">).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">bread_cnt</span> <span class="o">=</span> <span class="n">bread_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">bread_prc</span> <span class="o">=</span> <span class="n">bread_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">(</span><span class="n">normalize</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span><span class="o">*</span><span class="mi">100</span>
<span class="n">m</span> <span class="o">=</span> <span class="mi">12</span>
<span class="n">e</span> <span class="o">=</span> <span class="mi">24</span>
<span class="c1"># set up labels and legend labels
</span><span class="n">bread_prc</span> <span class="o">=</span> <span class="n">bread_prc</span><span class="p">.</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">bread_prc_str</span> <span class="o">=</span> <span class="n">bread_prc</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="nb">map</span><span class="p">(</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span> <span class="s">'{0:.1f}'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="n">x</span><span class="p">))</span> 
<span class="n">bread_prc</span><span class="p">[</span><span class="s">"labels"</span><span class="p">]</span> <span class="o">=</span> <span class="n">bread_prc_str</span> <span class="o">+</span> <span class="s">"% "</span> <span class="o">+</span> <span class="n">bread_prc</span><span class="p">[</span><span class="s">"index"</span><span class="p">]</span> 
<span class="n">bread_prc</span><span class="p">[</span><span class="s">"legend"</span><span class="p">]</span> <span class="o">=</span> <span class="n">bread_prc</span><span class="p">.</span><span class="n">loc</span><span class="p">[:,</span> <span class="s">"labels"</span><span class="p">]</span>
<span class="n">bread_maj</span> <span class="o">=</span> <span class="n">bread_prc</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">m</span><span class="p">]</span>
<span class="n">bread_maj</span><span class="p">[</span><span class="s">"legend"</span><span class="p">]</span> <span class="o">=</span> <span class="s">""</span>
<span class="n">bread_other</span> <span class="o">=</span> <span class="n">bread_prc</span><span class="p">[</span><span class="n">m</span><span class="p">:</span><span class="n">e</span><span class="p">]</span>
<span class="n">bread_other</span><span class="p">[</span><span class="s">"labels"</span><span class="p">]</span>  <span class="o">=</span> <span class="s">""</span>
<span class="n">bread_pchart</span> <span class="o">=</span> <span class="n">bread_maj</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">bread_other</span><span class="p">)</span>
<span class="n">bread_pchart</span> <span class="o">=</span> <span class="n">bread_pchart</span><span class="p">.</span><span class="n">set_index</span><span class="p">(</span><span class="s">"index"</span><span class="p">)</span>
<span class="c1"># colors
</span><span class="n">c1</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">'tab20b'</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">bread_maj</span><span class="p">[</span><span class="s">"legend"</span><span class="p">]))</span>
<span class="c1"># c2 = plt.cm.get_cmap('Reds_r', len(bread_pchart["legend"]))
</span><span class="n">c3</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">'tab20'</span><span class="p">,</span> <span class="nb">len</span><span class="p">(</span><span class="n">bread_other</span><span class="p">[</span><span class="s">"legend"</span><span class="p">]))</span>
<span class="n">colors</span> <span class="o">=</span> <span class="n">c1</span><span class="p">.</span><span class="n">colors</span>
<span class="c1"># colors2 = c2(np.linspace(0.2, 0.8, 13)) #.. and linspace for continuous ones
</span><span class="n">colors3</span> <span class="o">=</span> <span class="n">c3</span><span class="p">.</span><span class="n">colors</span>
<span class="n">newcolors</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">concatenate</span><span class="p">((</span><span class="n">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="n">m</span><span class="p">],</span> <span class="n">colors3</span><span class="p">[</span><span class="mi">0</span><span class="p">:(</span><span class="n">e</span><span class="o">-</span><span class="n">m</span><span class="p">)]))</span>
<span class="n">newcmp</span> <span class="o">=</span> <span class="n">mcolors</span><span class="p">.</span><span class="n">ListedColormap</span><span class="p">(</span><span class="n">newcolors</span><span class="p">)</span>
<span class="c1"># pie chart
</span><span class="n">pie_ax</span><span class="p">.</span><span class="n">pie</span><span class="p">(</span><span class="n">bread_pchart</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">],</span> <span class="n">labels</span><span class="o">=</span><span class="n">bread_pchart</span><span class="p">[</span><span class="s">"labels"</span><span class="p">],</span> 
            <span class="n">labeldistance</span><span class="o">=</span><span class="mf">1.1</span><span class="p">,</span> <span class="n">startangle</span><span class="o">=</span><span class="mi">20</span><span class="p">,</span> 
            <span class="n">colors</span><span class="o">=</span><span class="n">newcolors</span><span class="p">,</span>
            <span class="n">wedgeprops</span><span class="o">=</span><span class="p">{</span><span class="s">'linewidth'</span><span class="p">:</span> <span class="mf">0.5</span><span class="p">,</span> <span class="s">'linestyle'</span><span class="p">:</span> <span class="s">'solid'</span><span class="p">,</span>
                         <span class="s">'edgecolor'</span> <span class="p">:</span> <span class="s">'black'</span><span class="p">})</span>
<span class="c1"># legend
</span><span class="n">wedges</span> <span class="o">=</span> <span class="n">pie_ax</span><span class="p">.</span><span class="n">patches</span>
<span class="n">labels</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">bread_pchart</span><span class="p">[</span><span class="s">"legend"</span><span class="p">])</span>
<span class="n">wedges</span> <span class="o">=</span> <span class="n">wedges</span><span class="p">[</span><span class="n">m</span><span class="p">:</span><span class="n">e</span><span class="p">]</span>
<span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span><span class="p">[</span><span class="n">m</span><span class="p">:</span><span class="n">e</span><span class="p">]</span> 
<span class="n">pie_ax</span><span class="p">.</span><span class="n">legend</span><span class="p">(</span><span class="n">labels</span> <span class="o">=</span> <span class="n">labels</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">handles</span> <span class="o">=</span> <span class="n">wedges</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">bbox_to_anchor</span><span class="o">=</span><span class="p">(</span><span class="mf">1.0</span><span class="p">,</span> <span class="mf">0.85</span><span class="p">))</span> 

<span class="c1"># ...
# (rest of code for other two charts here)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>And then the charts themselves:</p>

<p><img src="/assets/images/french_toast_pie_plot.webp" alt="" /></p>

<p>At least they are colorful.</p>

<h2 id="raise-the-bar">Raise the Bar</h2>

<p>Having rejecting pie charts, I went on to try bar charts.</p>

<p>Again, portion of code:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
</pre></td><td class="code"><pre><span class="c1">###############################################################################
###############################################################################
# BAR CHARTS
###############################################################################
###############################################################################
</span>
<span class="n">bread</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"bread"</span><span class="p">]</span>
<span class="n">bread</span> <span class="o">=</span> <span class="n">bread</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'ingr'</span><span class="p">])</span>
<span class="n">bread_vc</span> <span class="o">=</span> <span class="n">bread</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"category"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">bread_grp</span> <span class="o">=</span> <span class="n">bread</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">,</span><span class="s">'category'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="s">' and '</span><span class="p">.</span><span class="n">join</span><span class="p">).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">bread_cnt</span> <span class="o">=</span> <span class="n">bread_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">bsz</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">bread_cnt</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">])</span>
<span class="c1"># ft_multi_bread = ft_recipes[ft_recipes["title"].isin(list(multi_bread_titles))]
</span>
<span class="n">mlk</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"milkcream"</span><span class="p">]</span>
<span class="n">mlk</span> <span class="o">=</span> <span class="n">mlk</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'ingr'</span><span class="p">])</span>
<span class="n">mlk_vc</span> <span class="o">=</span> <span class="n">mlk</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"category"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">mlk_grp</span> <span class="o">=</span> <span class="n">mlk</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">,</span><span class="s">'category'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="s">' and '</span><span class="p">.</span><span class="n">join</span><span class="p">).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">mlk_cnt</span> <span class="o">=</span> <span class="n">mlk_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">msz</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">mlk_cnt</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">])</span>

<span class="n">egg</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"eggs"</span><span class="p">]</span>
<span class="n">egg</span> <span class="o">=</span> <span class="n">egg</span><span class="p">.</span><span class="n">sort_values</span><span class="p">(</span><span class="n">by</span><span class="o">=</span><span class="p">[</span><span class="s">'ingr'</span><span class="p">])</span>
<span class="n">egg_vc</span> <span class="o">=</span> <span class="n">egg</span><span class="p">[[</span><span class="s">"title"</span><span class="p">,</span> <span class="s">"category"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
<span class="n">egg_grp</span> <span class="o">=</span> <span class="n">egg</span><span class="p">.</span><span class="n">groupby</span><span class="p">([</span><span class="s">'title'</span><span class="p">,</span><span class="s">'category'</span><span class="p">])[</span><span class="s">'ingr'</span><span class="p">].</span><span class="nb">apply</span><span class="p">(</span><span class="s">' and '</span><span class="p">.</span><span class="n">join</span><span class="p">).</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">egg_cnt</span> <span class="o">=</span> <span class="n">egg_grp</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>
<span class="n">esz</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">egg_cnt</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">])</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">1</span><span class="p">,</span> <span class="n">gridspec_kw</span><span class="o">=</span><span class="p">{</span><span class="s">'height_ratios'</span><span class="p">:</span> <span class="p">[</span><span class="n">bsz</span><span class="p">,</span> <span class="n">msz</span><span class="p">,</span> <span class="n">esz</span><span class="p">]},</span>
                        <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">14</span><span class="p">),</span> <span class="n">constrained_layout</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>

<span class="c1"># adjust title position to not be slightly off center
</span><span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">fig</span><span class="p">.</span><span class="n">subplotpars</span><span class="p">.</span><span class="n">right</span> <span class="o">+</span> <span class="n">fig</span><span class="p">.</span><span class="n">subplotpars</span><span class="p">.</span><span class="n">left</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
<span class="n">fig</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">"allrecipes.com French Toast Recipes </span><span class="se">\n</span><span class="s"> Essential Ingredient Types"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">mid</span><span class="p">)</span>

<span class="c1"># colors
</span><span class="n">colors</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">'tab20b'</span><span class="p">,</span> <span class="mi">20</span><span class="p">).</span><span class="n">colors</span>
<span class="n">c1</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">c2</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">5</span><span class="p">]</span>
<span class="n">c3</span> <span class="o">=</span> <span class="n">colors</span><span class="p">[</span><span class="mi">9</span><span class="p">]</span>

<span class="n">N</span> <span class="o">=</span> <span class="mi">23</span>
<span class="n">y_pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="o">*</span><span class="mf">3.0</span><span class="p">,</span><span class="n">N</span><span class="p">)</span>
<span class="n">xmax</span><span class="o">=</span><span class="mi">100</span>
<span class="c1">#############################################
# bread
#############################################
</span><span class="n">ax</span> <span class="o">=</span> <span class="n">axs</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
<span class="n">ax</span><span class="p">.</span><span class="n">set_xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="n">xmax</span><span class="p">])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">margins</span><span class="p">(</span><span class="mf">0.015</span><span class="p">)</span>
<span class="n">y</span> <span class="o">=</span> <span class="n">y_pos</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">bread_cnt</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">])]</span>
<span class="n">p1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">bread_cnt</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">tick_label</span><span class="o">=</span><span class="n">bread_cnt</span><span class="p">[</span><span class="s">"index"</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> 
                 <span class="n">height</span><span class="o">=</span><span class="mf">2.5</span><span class="p">,</span>  <span class="n">color</span><span class="o">=</span><span class="n">c1</span><span class="p">)</span>
<span class="c1"># ticks
</span><span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">ticks</span><span class="o">=</span><span class="p">[])</span>
<span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">bottom</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="c1"># bar label
</span><span class="n">ax</span><span class="p">.</span><span class="n">bar_label</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">label_type</span><span class="o">=</span><span class="s">'edge'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
<span class="c1"># remove border
</span><span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">:</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="n">s</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>And the plot output:</p>

<p><img src="/assets/images/french_toast_bar_plot2.webp" alt="" /></p>

<p>Overall, this seems good.</p>

<h2 id="other-ingredients">Other Ingredients</h2>

<p>Can also do a bar chart for “non-essential” ingredients (with slightly improved code):</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
</pre></td><td class="code"><pre><span class="n">ft_recipes</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"french_toast_recipes_cleaned_final.csv"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">na_filter</span> <span class="o">=</span> <span class="bp">False</span><span class="p">)</span> 
<span class="c1">###############################################################################
###############################################################################
# BAR CHARTS, VERTICAL
###############################################################################
###############################################################################
</span>
<span class="c1">#############################################
# other
#############################################
</span><span class="n">crit</span> <span class="o">=</span> <span class="p">((</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">!=</span> <span class="s">"eggs"</span><span class="p">)</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">!=</span> <span class="s">"bread"</span><span class="p">)</span> 
        <span class="o">&amp;</span> <span class="p">(</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">!=</span> <span class="s">"milkcream"</span><span class="p">))</span>
<span class="n">other</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">crit</span><span class="p">]</span>


<span class="n">ocats</span> <span class="o">=</span> <span class="p">[</span><span class="s">"flavor"</span><span class="p">,</span> <span class="s">"sugar"</span><span class="p">,</span> <span class="s">"syrup"</span><span class="p">,</span> <span class="s">"fruit"</span><span class="p">,</span> <span class="s">"spread"</span><span class="p">,</span> <span class="s">"dairy"</span><span class="p">,</span> <span class="s">"nut"</span><span class="p">,</span> <span class="s">"cereal"</span><span class="p">]</span>
<span class="n">ocats_cnt</span> <span class="o">=</span> <span class="p">[]</span>
<span class="n">hratios</span> <span class="o">=</span> <span class="p">[]</span>
<span class="k">for</span> <span class="n">c</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">ocats</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ocats</span><span class="p">))):</span>
    <span class="n">cat</span> <span class="o">=</span> <span class="n">other</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">other</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="n">c</span><span class="p">]</span>
    <span class="n">cat_cnt</span> <span class="o">=</span> <span class="n">cat</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">().</span><span class="n">reset_index</span><span class="p">()</span>
    <span class="n">ocats_cnt</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">cat_cnt</span><span class="p">)</span>
    <span class="n">hratios</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">cat_cnt</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">]))</span>


<span class="n">fig</span><span class="p">,</span> <span class="n">axs</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">subplots</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ocats</span><span class="p">),</span> <span class="mi">1</span><span class="p">,</span> <span class="n">gridspec_kw</span><span class="o">=</span><span class="p">{</span><span class="s">'height_ratios'</span><span class="p">:</span> <span class="n">hratios</span><span class="p">},</span>
                        <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">9</span><span class="p">,</span><span class="mi">20</span><span class="p">),</span> <span class="n">constrained_layout</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="n">mid</span> <span class="o">=</span> <span class="p">(</span><span class="n">fig</span><span class="p">.</span><span class="n">subplotpars</span><span class="p">.</span><span class="n">right</span> <span class="o">+</span> <span class="n">fig</span><span class="p">.</span><span class="n">subplotpars</span><span class="p">.</span><span class="n">left</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span>
<span class="n">fig</span><span class="p">.</span><span class="n">suptitle</span><span class="p">(</span><span class="s">"allrecipes.com French Toast Recipes </span><span class="se">\n</span><span class="s"> 'Other' Ingredient Counts"</span><span class="p">,</span> <span class="n">fontsize</span><span class="o">=</span><span class="mi">18</span><span class="p">,</span> <span class="n">x</span><span class="o">=</span><span class="n">mid</span><span class="p">)</span>
<span class="c1"># colors
</span><span class="n">colors</span> <span class="o">=</span> <span class="n">plt</span><span class="p">.</span><span class="n">cm</span><span class="p">.</span><span class="n">get_cmap</span><span class="p">(</span><span class="s">'tab20b'</span><span class="p">,</span> <span class="mi">40</span><span class="p">).</span><span class="n">colors</span>

<span class="n">N</span> <span class="o">=</span> <span class="nb">max</span><span class="p">([</span><span class="nb">len</span><span class="p">(</span><span class="n">i</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">ocats_cnt</span><span class="p">])</span>
<span class="n">y_pos</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">linspace</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="n">N</span><span class="o">*</span><span class="mf">3.0</span><span class="p">,</span><span class="n">N</span><span class="p">)</span>
<span class="n">xmax</span><span class="o">=</span><span class="mi">70</span>

<span class="k">for</span> <span class="n">occ</span><span class="p">,</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">zip</span><span class="p">(</span><span class="n">ocats_cnt</span><span class="p">,</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">ocats_cnt</span><span class="p">))):</span>
    <span class="n">ax</span> <span class="o">=</span> <span class="n">axs</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">set_xlim</span><span class="p">([</span><span class="mi">0</span><span class="p">,</span><span class="n">xmax</span><span class="p">])</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">margins</span><span class="p">(</span><span class="mf">0.015</span><span class="p">)</span>
    <span class="n">y</span> <span class="o">=</span> <span class="n">y_pos</span><span class="p">[</span><span class="mi">0</span><span class="p">:</span><span class="nb">len</span><span class="p">(</span><span class="n">occ</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">])]</span>
    <span class="n">x</span> <span class="o">=</span> <span class="n">occ</span><span class="p">[</span><span class="s">"ingr"</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">p1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">.</span><span class="n">barh</span><span class="p">(</span><span class="n">y</span><span class="p">,</span> <span class="n">x</span><span class="p">,</span> 
               <span class="n">tick_label</span><span class="o">=</span><span class="n">occ</span><span class="p">[</span><span class="s">"index"</span><span class="p">][::</span><span class="o">-</span><span class="mi">1</span><span class="p">],</span> <span class="n">height</span><span class="o">=</span><span class="mf">2.5</span><span class="p">,</span> <span class="n">color</span><span class="o">=</span><span class="n">colors</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="n">i</span><span class="o">*</span><span class="mi">3</span><span class="p">])</span>
    <span class="c1"># ticks
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">set_xticks</span><span class="p">(</span><span class="n">ticks</span><span class="o">=</span><span class="p">[])</span>
    <span class="n">ax</span><span class="p">.</span><span class="n">tick_params</span><span class="p">(</span><span class="n">bottom</span><span class="o">=</span><span class="bp">False</span><span class="p">,</span> <span class="n">left</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
    <span class="c1"># bar label
</span>    <span class="n">ax</span><span class="p">.</span><span class="n">bar_label</span><span class="p">(</span><span class="n">p1</span><span class="p">,</span> <span class="n">label_type</span><span class="o">=</span><span class="s">'edge'</span><span class="p">,</span> <span class="n">padding</span><span class="o">=</span><span class="mi">8</span><span class="p">)</span>
    <span class="c1"># remove border
</span>    <span class="k">for</span> <span class="n">s</span> <span class="ow">in</span> <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">:</span>
        <span class="n">ax</span><span class="p">.</span><span class="n">spines</span><span class="p">[</span><span class="n">s</span><span class="p">].</span><span class="n">set_visible</span><span class="p">(</span><span class="bp">False</span><span class="p">)</span>
        
<span class="n">plt</span><span class="p">.</span><span class="n">savefig</span><span class="p">(</span><span class="s">'2_analysis/french_toast_bar_plot_other.webp'</span><span class="p">,</span> <span class="n">dpi</span><span class="o">=</span><span class="mi">300</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french_toast_bar_plot_other.webp" alt="" />
<em>Categories: flavor, sugar, syrup, fruit, spread, dairy, nuts, and cereal.</em></p>

<p><a href="/projects/french_toast_data_analysis_0.html">Part 1</a></p>

<p><a href="/projects/french_toast_data_analysis_1.html">Part 2</a></p>

<p><a href="https://github.com/austinpursley/french-toast-data-analysis">GitHub code</a></p>]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[Here my goal is to visualize the variety and number of ingredients used among the allrecipes.com french toast recipe data I gathered.]]></summary></entry><entry><title type="html">And Serve You French Toast (Data) Again, Part 1: Collect and Clean</title><link href="http://localhost:4000/projects/french_toast_data_analysis_0.html" rel="alternate" type="text/html" title="And Serve You French Toast (Data) Again, Part 1: Collect and Clean" /><published>2022-04-08T00:00:00-04:00</published><updated>2022-04-08T00:00:00-04:00</updated><id>http://localhost:4000/projects/french_toast_data_analysis_0</id><content type="html" xml:base="http://localhost:4000/projects/french_toast_data_analysis_0.html"><![CDATA[<p>French toast is one of the few things I think I’ve cooked more than half a dozen times. That’s probably what compelled me to attempt a data analysis project of french toast recipes. After all, with the internet, untold french toast recipes lay at my finger tips. Just what secrets could we unlock looking into their depths? Probably not much, but at least I’d get a gee-whiz data analysis 101 project out of it.</p>

<p><img src="/assets/images/beloved_food_french_toast.webp" alt="" />
<em>French toast is great.</em></p>

<h2 id="no-really-why-i-am-doing-this-exactly">No really, why I am doing this exactly??</h2>

<p>Usually, data anlaysis is done to answer a question, test a hypothesis, etc. But I didn’t really have any clear cut reasons from the beginning. That’s part of the fun of doing personal project; when I’m interested in something, I like to just jump in and get started.</p>

<p>That being said, I still had *some* ideas, such as:</p>

<ul>
  <li>If you had enough recipes, could you normalize the data and figure out an “average” version of that recipe?</li>
  <li>How many types of bread, eggs, and milk/cream (i.e. essential ingredients) would you find among french toast recipes?</li>
  <li>What kind of variations of french toast are there?</li>
  <li>What are the unique ingredients beyond the bread, eggs, and milk/cream?</li>
</ul>

<h2> <a href="https://twitter.com/dril/status/377333121554718720" style="all:unset">I am simply here to collect data</a></h2>

<p>I found some recipe data more or less put together on GitHub, user onzie9’s
 <a href="https://github.com/onzie9/all_recipes_data">all_recipe_data</a> 
 . 250k+ recipe ingredients scraped from allrecipes.com and organized into text files. Below is an example of the content of those text files. Each recipe has a “=” delimiter, recipe title, recipe number and type, and ingredient list.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
</pre></td><td class="code"><pre><span class="o">=======================================</span>
<span class="n">mexican</span><span class="o">-</span><span class="n">strawberry</span><span class="o">-</span><span class="n">water</span><span class="o">-</span><span class="n">agua</span><span class="o">-</span><span class="n">de</span><span class="o">-</span><span class="n">fresa</span>
<span class="mi">3</span> <span class="n">main</span>
<span class="p">[</span><span class="mi">4</span> <span class="n">cups</span> <span class="n">strawberries</span><span class="p">,</span> <span class="n">sliced</span>
 <span class="mi">1</span> <span class="n">cup</span> <span class="n">white</span> <span class="n">sugar</span>
 <span class="mi">8</span> <span class="n">cups</span> <span class="n">cold</span> <span class="n">water</span>
 <span class="mi">1</span> <span class="n">lime</span><span class="p">,</span> <span class="n">cut</span> <span class="n">into</span> <span class="mi">8</span> <span class="n">wedges</span> <span class="p">(</span><span class="n">optional</span><span class="p">)</span>
 <span class="mi">8</span> <span class="n">fresh</span> <span class="n">mint</span> <span class="n">sprigs</span> <span class="p">(</span><span class="n">optional</span><span class="p">)]</span>
<span class="o">=======================================</span>
<span class="n">crispy</span><span class="o">-</span><span class="n">cheese</span><span class="o">-</span><span class="n">twists</span>
<span class="mi">6663</span> <span class="n">main</span>
<span class="p">[</span><span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="n">cup</span> <span class="n">Parmesan</span> <span class="n">cheese</span>
 <span class="mi">3</span><span class="o">/</span><span class="mi">4</span> <span class="n">teaspoon</span> <span class="n">ground</span> <span class="n">black</span> <span class="n">pepper</span>
 <span class="mi">1</span><span class="o">/</span><span class="mi">2</span> <span class="n">teaspoon</span> <span class="n">garlic</span> <span class="n">powder</span>
 <span class="mi">1</span> <span class="p">(</span><span class="mf">17.5</span> <span class="n">ounce</span><span class="p">)</span> <span class="n">package</span> <span class="n">frozen</span> <span class="n">puff</span> <span class="n">pastry</span><span class="p">,</span> <span class="n">thawed</span>
 <span class="mi">1</span> <span class="n">egg</span> <span class="n">white</span><span class="p">]</span>
<span class="o">=======================================</span>
<span class="n">basil</span><span class="o">-</span><span class="n">roasted</span><span class="o">-</span><span class="n">peppers</span><span class="o">-</span><span class="ow">and</span><span class="o">-</span><span class="n">monterey</span><span class="o">-</span><span class="n">jack</span><span class="o">-</span><span class="n">cornbread</span>
<span class="mi">6664</span> <span class="n">Bread</span>
<span class="p">...</span>
<span class="p">[</span><span class="n">recipes</span> <span class="k">continue</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></figure>

<h2 id="how-the-tables-turn">How the tables turn</h2>

<p>This was pretty good. But I wanted this “raw data” to be restructured into a tabular format instead, something I could manipulate as a Pandas data frame and save as a CSV file.</p>

<p>I used Python to get there, starting with defining the GitHub data locations on my computer.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">regex</span> <span class="k">as</span> <span class="n">re</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>

<span class="n">raw_recipe_data_dir</span> <span class="o">=</span> <span class="s">"all_recipes_data-master/DataFiles/"</span>
<span class="n">raw_data_list</span> <span class="o">=</span> <span class="p">[</span><span class="s">"raw_data_1.txt"</span><span class="p">,</span> <span class="s">"raw_data_2.txt"</span><span class="p">,</span> <span class="s">"raw_data_3.txt"</span><span class="p">,</span>
                 <span class="s">"raw_data_4.txt"</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Then I define a regex pattern for extracting the data.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
</pre></td><td class="code"><pre><span class="n">pattern</span> <span class="o">=</span> <span class="sa">r</span><span class="s">"=======================================(?:\n|\r\n?)((?:.+))(?:\n|\r\n?)((?:.+))(?:\n|\r\n?)(\[(?:[^=]|\n)+\])"</span>
<span class="n">recipereg</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="nb">compile</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>See the screenshot from
 <a href="https://regex101.com/">regex101.com</a> 
 below for an overview of how this works out. The recipe title, number and type, and ingredients correspond to the
 <a href="https://docs.python.org/3/howto/regex.html#grouping">capture groups</a> 
 i.e. the regex in parentheses “(…)”. The non-capture groups, i.e. the regex in “(?:…)”, are ignored.</p>

<p><img src="/assets/images/french-toast-regex-example.webp" alt="" />
<em>Regex pattern for recipe data in text files.</em></p>

<p>The next part of code iterates through each text file, applies the regex pattern, and saves matches into a Pandas data frame.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
</pre></td><td class="code"><pre><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">"Title"</span><span class="p">,</span> <span class="s">"Type"</span><span class="p">,</span> <span class="s">"Ingredients"</span><span class="p">])</span>
<span class="k">for</span> <span class="n">fn</span> <span class="ow">in</span> <span class="n">raw_data_list</span><span class="p">:</span>
    <span class="c1"># get text file contents
</span>    <span class="n">f_loc</span> <span class="o">=</span> <span class="n">raw_recipe_data_dir</span> <span class="o">+</span> <span class="n">fn</span>
    <span class="n">f</span> <span class="o">=</span> <span class="nb">open</span><span class="p">(</span><span class="n">raw_recipe_data_dir</span> <span class="o">+</span> <span class="n">fn</span><span class="p">)</span>
    <span class="n">contents</span> <span class="o">=</span> <span class="n">f</span><span class="p">.</span><span class="n">read</span><span class="p">()</span>
    
    <span class="c1"># find regex pattern matches in contents 
</span>    <span class="n">m</span> <span class="o">=</span> <span class="n">re</span><span class="p">.</span><span class="n">findall</span><span class="p">(</span><span class="n">pattern</span><span class="p">,</span> <span class="n">contents</span><span class="p">)</span>
    
    <span class="c1"># input matches into dataframe
</span>    <span class="n">df_temp</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">DataFrame</span><span class="p">(</span><span class="n">columns</span><span class="o">=</span><span class="p">[</span><span class="s">"Title"</span><span class="p">,</span> <span class="s">"Type"</span><span class="p">,</span> <span class="s">"Ingredients"</span><span class="p">])</span>
    <span class="n">df_temp</span><span class="p">[</span><span class="s">"Title"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">m</span><span class="p">]</span>
    <span class="n">df_temp</span><span class="p">[</span><span class="s">"Type"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">m</span><span class="p">]</span>
    <span class="n">df_temp</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">]</span> <span class="o">=</span> <span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span> <span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="n">m</span><span class="p">]</span>
    <span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">df_temp</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>Boom, that’s our data in tabular form.</p>

<h2 id="the-first-cut-is-the-deepest">The First Cut Is The Deepest</h2>

<p>Next, I wanted to get the approximate subset of recipes for french toast. I used a simple solution: just drop the recipe if its title did not contain both “french” and “toast”.</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
</pre></td><td class="code"><pre><span class="c1"># drop unnecessary columns
</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">drop</span><span class="p">(</span><span class="s">'Type'</span><span class="p">,</span> <span class="n">axis</span><span class="o">=</span><span class="mi">1</span><span class="p">)</span>

<span class="c1"># make sure everything is lowercase
</span><span class="n">df</span><span class="p">[</span><span class="s">"Title"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Title"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span>
<span class="n">df</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">lower</span><span class="p">()</span>

<span class="c1"># drops rows that don't contain "french" and "toast" in the title of recipe
</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">[(</span><span class="n">df</span><span class="p">[</span><span class="s">"Title"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s">"french"</span><span class="p">))</span> <span class="o">&amp;</span> <span class="p">(</span><span class="n">df</span><span class="p">[</span><span class="s">"Title"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="s">"toast"</span><span class="p">))]</span>

<span class="c1"># drop duplicate rows
</span><span class="n">df</span> <span class="o">=</span> <span class="n">df</span><span class="p">.</span><span class="n">drop_duplicates</span><span class="p">()</span>

<span class="c1"># double check ingredient frequency / no duplicates
</span><span class="n">count_ingredients</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">].</span><span class="n">value_counts</span><span class="p">()</span>

<span class="c1"># write CSV
</span><span class="n">df</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">]</span> <span class="o">=</span> <span class="n">df</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">strip</span><span class="p">(</span><span class="s">'[]'</span><span class="p">)</span>
<span class="n">df</span><span class="p">.</span><span class="n">to_csv</span><span class="p">(</span><span class="s">"french_toast_recipes.csv"</span><span class="p">,</span> <span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>This also simplifies things by ignoring other names for french toast, of which there are
 <a href="https://en.wikipedia.org/wiki/French_toast">quite a few</a> 
 , such as the French “pain perdu” or the British “eggy bread”.</p>

<p>And there we go, I now had what presumably could be considered an alright set of french toast recipes from this allrecipes.com data set.</p>

<p><img src="/assets/images/french-toast-csv-example.webp" alt="" />
<em>Example of what the tabular data looks like.</em></p>

<h2 id="youre-gonna-clean-that-data">You’re Gonna Clean That Data</h2>

<p><img src="/assets/images/french-toast-cass.webp" alt="" />
<em>French toast casserole? Doesn’t count.</em></p>

<p>So that was pretty easy and cool, but I was far from being done. Just because “french” and “toast” were in the title, doesn’t mean these were real deal french toast recipes. Furthermore, it didn’t take long to figure out the ingredients data was, from an analysis perspective, junk. The units and quantities were not separated, even the simplest ingredients had dozens of variants, some lines had multiple ingredients in them, etc. A cleanse was in order.</p>

<p>At the start, I hadn’t realized the hard task I had haphazardly jumped into. My cleaning process at the start was pretty “whatever”, I learned as I went, and it was iterative. I would clean data in one dimension, stepped back to clean in another, then re-do a previous cleanse, etc. I ended up writing 7 Python script files that either cleaned the data or helped me inspect / visualize it. Interwoven into the cleaning process was additional restructuring as well.</p>

<p>Here’s a summary of the cleaning process:</p>

<ul>
  <li>Do “quality checks” on the data. For example, below I am checking the unique values in the “flavor” category. It’s a quick read on unique values and how often they appear, and therefore makes it easy to spot anomalies such as duplicates, typos, missing values, etc.</li>
</ul>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
</pre></td><td class="code"><pre><span class="n">qc_check_flavor</span> <span class="o">=</span> <span class="n">ft_recipes</span><span class="p">.</span><span class="n">loc</span><span class="p">[</span><span class="n">ft_recipes</span><span class="p">[</span><span class="s">"category"</span><span class="p">]</span> <span class="o">==</span> <span class="s">"flavor"</span><span class="p">,</span> <span class="p">[</span><span class="s">"ingr"</span><span class="p">]].</span><span class="n">value_counts</span><span class="p">()</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p><img src="/assets/images/french-toast-qa-check-example.webp" alt="" />
<em>Example of flavor value counts. Shout out to Spyder’s variable explorer.</em></p>

<ul>
  <li>Cut out recipes that did not meet certain french toast qualifications. For example, the code below cuts out recipes that do not have the core ingredients of bread, eggs, and milk/cream.</li>
</ul>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
</pre></td><td class="code"><pre><span class="c1"># looking for recipes that don't have basic ingredients (bread, milk, eggs)
# bread
</span><span class="n">bread</span> <span class="o">=</span> <span class="p">[</span><span class="s">"bread"</span><span class="p">,</span> <span class="s">"toast"</span><span class="p">,</span> <span class="s">"baguette"</span><span class="p">,</span> <span class="s">"croissant"</span><span class="p">,</span> <span class="s">"hawaiian"</span><span class="p">,</span> 
                <span class="s">"challah"</span><span class="p">,</span> <span class="s">"brioche"</span><span class="p">,</span> <span class="s">"mexican bolillo rolls"</span><span class="p">,</span> <span class="s">"pannetone"</span><span class="p">,</span>
                <span class="s">"italian bread"</span><span class="p">]</span>
<span class="n">mask_bread</span> <span class="o">=</span> <span class="n">ft</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="sa">r</span><span class="s">'\b(?:{})\b'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'|'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">bread</span><span class="p">)))</span>
<span class="n">ft</span><span class="p">[</span><span class="o">~</span><span class="n">mask_bread</span><span class="p">].</span><span class="n">to_csv</span><span class="p">(</span><span class="s">"0_cut_ft_recipes/french_toast_recipes_cut_no_bread.csv"</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="c1">#milk
</span><span class="n">milk</span> <span class="o">=</span> <span class="p">[</span><span class="s">"milk"</span><span class="p">,</span> <span class="s">"milks"</span><span class="p">,</span> <span class="s">"half-and-half"</span><span class="p">,</span> <span class="s">"half and half"</span><span class="p">,</span> <span class="s">"heavy whipping cream"</span><span class="p">,</span> 
                 <span class="s">"heavy cream"</span><span class="p">,</span> <span class="s">"egg nog"</span><span class="p">,</span> <span class="s">"eggnog"</span><span class="p">,</span> <span class="s">"whipping cream"</span><span class="p">,</span> <span class="s">"light cream"</span><span class="p">,</span> 
                 <span class="s">"mascarpone cheese"</span><span class="p">,</span> <span class="s">"irish cream liqueur"</span><span class="p">]</span>
<span class="n">mask_milk</span> <span class="o">=</span> <span class="n">ft</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="sa">r</span><span class="s">'\b(?:{})\b'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'|'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">milk</span><span class="p">)))</span>
<span class="n">ft</span><span class="p">[</span><span class="o">~</span><span class="n">mask_milk</span><span class="p">].</span><span class="n">to_csv</span><span class="p">(</span><span class="s">"0_cut_ft_recipes/french_toast_recipes_cut_no_milk.csv"</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="c1"># eggs
</span><span class="n">eggs</span> <span class="o">=</span> <span class="p">[</span><span class="s">"egg"</span><span class="p">,</span> <span class="s">"eggs"</span><span class="p">,</span> <span class="s">"egg substitute"</span><span class="p">,</span> <span class="s">"egg beaters"</span><span class="p">]</span>
<span class="n">mask_egg</span> <span class="o">=</span> <span class="n">ft</span><span class="p">[</span><span class="s">"Ingredients"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="sa">r</span><span class="s">'\b(?:{})\b'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'|'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">eggs</span><span class="p">)))</span>
<span class="n">ft</span><span class="p">[</span><span class="o">~</span><span class="n">mask_egg</span><span class="p">].</span><span class="n">to_csv</span><span class="p">(</span><span class="s">"0_cut_ft_recipes/french_toast_recipes_cut_no_egg.csv"</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>

<span class="n">mask</span> <span class="o">=</span> <span class="n">mask_var</span> <span class="o">&amp;</span> <span class="n">mask_bread</span> <span class="o">&amp;</span> <span class="n">mask_milk</span> <span class="o">&amp;</span> <span class="n">mask_egg</span>

<span class="n">ft_non</span> <span class="o">=</span> <span class="n">ft</span><span class="p">[</span><span class="o">~</span><span class="n">mask</span><span class="p">]</span> 
<span class="n">ft_clean</span> <span class="o">=</span> <span class="n">ft</span><span class="p">[</span><span class="n">mask</span><span class="p">]</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>Another example: cutting out french toast variations. Some of these were straight abominations and would never pass as french toast, e.g. “casseroles” and “souffles”. Others were straddling the line of french toast purity. Ultimately, I chose the more “purist” approach (see further below for the whole “does baked count” thing).</li>
</ul>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="n">ft</span> <span class="o">=</span> <span class="n">pd</span><span class="p">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">"french_toast_recipes.csv"</span><span class="p">,</span> <span class="n">index_col</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
<span class="c1"># removing variants
</span><span class="n">var</span> <span class="o">=</span> <span class="p">[</span><span class="s">"casserole"</span><span class="p">,</span> <span class="s">"sandwhich"</span><span class="p">,</span> <span class="s">"sandwich"</span><span class="p">,</span> <span class="s">"sandwhiches"</span><span class="p">,</span> <span class="s">"sandwiches"</span><span class="p">,</span> <span class="s">"stick"</span><span class="p">,</span> <span class="s">"sticks"</span><span class="p">,</span> 
             <span class="s">"fingers"</span><span class="p">,</span> <span class="s">"bites"</span><span class="p">,</span> <span class="s">"roll-ups"</span><span class="p">,</span> <span class="s">"banana-roll"</span><span class="p">,</span> <span class="s">"cookies"</span><span class="p">,</span> <span class="s">"wrapped-in-bacon"</span><span class="p">,</span>
             <span class="s">"toast-bake"</span><span class="p">,</span> <span class="s">"kabobs"</span><span class="p">,</span> <span class="s">"strata"</span><span class="p">,</span> <span class="s">"souffle"</span><span class="p">,</span> <span class="s">"soufle"</span><span class="p">,</span> <span class="s">"cobbler"</span><span class="p">,</span> <span class="s">"in-a-cup"</span><span class="p">,</span>
             <span class="s">"baked"</span><span class="p">,</span> <span class="s">"bake"</span><span class="p">,</span> <span class="s">"cups"</span><span class="p">,</span> <span class="s">"slow-cooker"</span><span class="p">,</span> <span class="s">"no-fry"</span><span class="p">,</span> <span class="s">"overnight"</span><span class="p">]</span>
<span class="n">mask_var</span> <span class="o">=</span> <span class="o">~</span><span class="p">(</span><span class="n">ft</span><span class="p">[</span><span class="s">"Title"</span><span class="p">].</span><span class="nb">str</span><span class="p">.</span><span class="n">contains</span><span class="p">(</span><span class="sa">r</span><span class="s">'\b(?:{})\b'</span><span class="p">.</span><span class="nb">format</span><span class="p">(</span><span class="s">'|'</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">var</span><span class="p">))))</span>
<span class="n">ft</span><span class="p">[</span><span class="o">~</span><span class="n">mask_var</span><span class="p">].</span><span class="n">to_csv</span><span class="p">(</span><span class="s">"0_cut_ft_recipes/french_toast_recipes_cut_variants.csv"</span><span class="p">,</span><span class="n">index</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<ul>
  <li>Break down data into ingredient (just words), units, and quantities. Easy enough to separate numbers from words. We can even apply a first guess of the units by looking at first word that occurs after the first number. But after that, it required a lot of manual data review to get correct breakdowns.</li>
  <li>Simplify and categorize the ingredients. I wanted to make the data more uniform and simplify many variants of what were (basically) the same ingredients. For example, see below. The category is easy enough, this is the milk/cream used for the custard. However, notice that “1% fat milk” was changed to “low fat milk”. I did this because, as a culinary cipher like myself finds out, there are quite a few variations of milk and names for defining them. “1% milk” is the same as “low fat milk”, but other recipes would use one or the other, so I had to choose just one name for all recipes. Another example: some ingredients had “or”s in them, e.g. “italian or french bread”, and for those I decided to always go with the first option.</li>
</ul>

<p><img src="/assets/images/french-toast-ingr-breakdown-example.webp" alt="" /></p>

<p>Example of ingredient breakdown.</p>

<h3 id="bake-or-nah">Bake? Or nah?</h3>

<p>The largest issue / side quest I ran into was deciding whether “baked” variants of french toast were allowed. After I thought I was mostly done with cleaning, I did
 <a href="/assets/def_of_french_toast.txt">some research</a>, and decided french toast had to be fried/sautéed. Therefore, I decided to cut all recipes that were primarily cooked through baking. Unfortunately, this ended up being quite involved. After trying to make cuts off of titles and ingredients alone, I realize I would have to look at the recipe instructions to determine if the recipe was baked or not.</p>

<p>Problem was, the instructions were not included in the data I had. But I had to commit to what I started, so I ended up writing an entire new Python script just to scrape data from allrecipes.com and acquire the missing instructions. Then it was a long process of manually checking each of the suspect recieps to determine how they were cooked. Despite the challenge, this worked out nicely and I think I succeeded in my purge. But it also cut out many recipes, to the point where I wondered if I was being too much of a purist.</p>

<h2 id="its-over">It’s Over</h2>

<p>At the end of the process, each ingredient had been broken down into components: a quantity, units, cut, name of ingredient, category and subcategory. Special attention was paid to bread, milk/creams, and eggs.</p>

<p><img src="/assets/images/french-toast-ingr-cleaned-sample.webp" alt="" />
<em>Sample of final cleaned data set.</em></p>

<p><a href="/projects/french_toast_data_analysis_1.html">Part 2</a></p>

<p><a href="/projects/french_toast_data_analysis_2.html">Part 3</a></p>

<p><a href="https://github.com/austinpursley/french-toast-data-analysis">GitHub code</a></p>]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[French toast is one of the few things I think I’ve cooked more than half a dozen times. That’s probably what compelled me to attempt a data analysis project of french toast recipes. After all, with the internet, untold french toast recipes lay at my finger tips. Just what secrets could we unlock looking into their depths? Probably not much, but at least I’d get a gee-whiz data analysis 101 project out of it.]]></summary></entry><entry><title type="html">Trying Out Blender</title><link href="http://localhost:4000/projects/messin-with-blender.html" rel="alternate" type="text/html" title="Trying Out Blender" /><published>2021-09-07T00:00:00-04:00</published><updated>2021-09-07T00:00:00-04:00</updated><id>http://localhost:4000/projects/messin-with-blender</id><content type="html" xml:base="http://localhost:4000/projects/messin-with-blender.html"><![CDATA[<p>Got a quick kick out of <a href="https://www.blender.org/about/">Blender</a>.</p>

<iframe width="560" height="315" src="https://www.youtube.com/embed/DElLaJtf8ys" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>

<iframe width="560" height="315" src="https://www.youtube.com/embed/RLvjwQdA6Xw" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen=""></iframe>]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[Got a quick kick out of Blender.]]></summary></entry><entry><title type="html">Curing ‘Plant Blindness’ with iNaturalist</title><link href="http://localhost:4000/projects/iNat_intro.html" rel="alternate" type="text/html" title="Curing ‘Plant Blindness’ with iNaturalist" /><published>2021-02-27T00:00:00-05:00</published><updated>2021-02-27T00:00:00-05:00</updated><id>http://localhost:4000/projects/iNat_intro</id><content type="html" xml:base="http://localhost:4000/projects/iNat_intro.html"><![CDATA[<p><a href="https://www.inaturalist.org/observations?order_by=observed_on&amp;place_id=any&amp;subview=grid&amp;user_id=autrpy&amp;verifiable=any">My iNaturalist Observations</a></p>

<p>“A traveler should be a botanist, for in all views plants form the chief embellishment.”</p>

<p>-Charles Darwin</p>

<p><img src="/assets/images/202004171208.webp" alt="venus fly trap" />
<em>Dionaea muscipula / venus flytrap, observed by myself</em></p>

<p><a href="https://en.wikipedia.org/wiki/INaturalist">iNaturalist</a> 
 is “an online social network of naturalists, citizen scientists, and biologists built on the concept of mapping and sharing observations of biodiversity across the globe”. Users upload wildlife observations (usually photos but also audio and GIFs) and other users and AI tools help provide an identification.
 <a href="https://www.inaturalist.org/pages/getting+started">More info on getting started.</a></p>

<p>It’s an amazing resource that can reveal the unfamiliar in the familiar. For most of my life, I never really paid close attention to plants and they just kind of blurred together. But I wanted to learn how to identify plants, especially trees, and iNat made it very easy to cure my
 <a href="https://en.wikipedia.org/wiki/Plant_blindness">“plant blindness”</a> 
 . I started using iNat to catalog plants I’d see on my usual hikes in the nearby Croatan National Forest. Eventually I realized there was this whole world I was missing out on and got hooked. How could I not fall in love with plants when I was often walking among
 <a href="https://en.wikipedia.org/wiki/Flatwoods">longleaf pines</a> 
 and finding carnivorous plants in
 <a href="https://en.wikipedia.org/wiki/Pocosin">pocosins</a> 
 ? This past spring I couldn’t wait to get out every weekend and see what new plants I could discover (plus, there wasn’t anything much better to do during a pandemic).</p>

<p>Since starting in 2020, I’ve identified ~250 types of plants and ~100 species of others organisms. And it’s not just identification, I’ve also picked up a web of knowledge covering ecology, evolution, etc. Anyways, I highly recommend anyone with even a little bit of curiosity to start using iNat and learn about the wildlife around them.</p>

<!--    ========================================        iNat widget         =========================================-->
<style type="text/css" media="screen">
.inat-widget {padding: 5px; line-height: 1;}
.inat-widget td {vertical-align: top; padding-bottom: 0px;}
.inat-label { color: #888; }
.inat-meta { font-size: smaller; margin-top: 3px; line-height: 1.2;}
.inat-observation-body, .inat-user-body { padding-left: 10px; }
.inat-observation-image {text-align: center;}
.inat-observation-image, .inat-user-image { width: 96x; display: inline-block; }
.inat-observation-image img, .inat-user-image img { max-width: 96px; }
.inat-observation-image img { vertical-align: middle; }
.inat-widget-small .inat-observation-image { display:block; float: left; margin: 0 3px 3px 0; height:96px;}
.inat-user-body {vertical-align: middle;}
.inat-widget td.inat-user-body {vertical-align: middle;}
.inat-widget .inat-footer td.inat-value {vertical-align: middle; padding-left: 0px;}
</style>

<div class="inat-widget">
     <table class="inat-footer">
    <tr class="inat-user">
      <td class="inat-value">
        <strong>
            <a href="https://www.inaturalist.org/observations?order_by=observed_on&amp;place_id=any&amp;subview=grid&amp;user_id=autrpy&amp;verifiable=any">View my observations »</a>
        </strong>
      </td>
    </tr>
  </table>
  <script type="text/javascript" charset="utf-8" src="https://www.inaturalist.org/observations/autrpy.widget?layout=medium&amp;limit=8&amp;order=desc&amp;order_by=observed_on"></script>
</div>

<!--    ===========================================================================================================-->]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[My iNaturalist Observations]]></summary></entry><entry><title type="html">Static Site Generation with Python</title><link href="http://localhost:4000/projects/html_page_autom_python.html" rel="alternate" type="text/html" title="Static Site Generation with Python" /><published>2020-05-17T00:00:00-04:00</published><updated>2020-05-17T00:00:00-04:00</updated><id>http://localhost:4000/projects/html_page_autom_python</id><content type="html" xml:base="http://localhost:4000/projects/html_page_autom_python.html"><![CDATA[<p>All of the content on this website is (so far) simple static HTML pages with CSS. This works out fine because a personal website like this does not need to be dynamic for user interaction (plus, I can’t use backend tools like PHP because I host the site on
 <a href="https://pages.github.com/">GitHub Pages</a> 
 ). However, manually editing HTML files can be tedious, especially if the same information is being edited in many different places. One solution for this is a
 <a href="https://en.wikipedia.org/wiki/Web_template_system#Static_site_generators">static site generator</a> 
 . There are tools out there for static site generation, but I didn’t know that when I started this project. That ignorance plus getting carried away ended up with me programming my own mini generator with Python, where all I have to do is edit data and run the script to automatically generate HTML pages.</p>

<p>Let’s say I want a page to show off some photos. As a starting point, I could fill a folder with images that I want to share:</p>

<p><img src="/assets/images/p2h_images_in_folder.webp" alt="" /></p>

<p>With Python, it’s easy to iterate through the images:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
</pre></td><td class="code"><pre><span class="n">pattern</span> <span class="o">=</span> <span class="s">'/assets/images/*.webp'</span>
<span class="n">img_arr</span> <span class="o">=</span> <span class="nb">sorted</span><span class="p">(</span><span class="n">glob</span><span class="p">.</span><span class="n">glob</span><span class="p">(</span><span class="n">pattern</span><span class="p">),</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
<span class="k">for</span> <span class="n">img_dir</span> <span class="ow">in</span> <span class="n">img_arr</span><span class="p">:</span>
<span class="c1">#do stuff here
</span>    
</pre></td></tr></tbody></table></code></pre></figure>

<p>I also want to know when the image was created (‘Datetime’) or any captions (‘UserComment’) that might have been set. This can be contained in the image’s
 <a href="https://en.wikipedia.org/wiki/Exif">EXIF</a> 
 metadata. Images should usually have ‘DateTime’ metadata but other metadata like “UserComment” can be set with photo management software. The simplified example code below extracts UserComment data:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
</pre></td><td class="code"><pre><span class="c1"># the Pillow (PIL) and piexif libraries
# worth mentioning, very helpful
</span><span class="kn">from</span> <span class="nn">PIL</span> <span class="kn">import</span> <span class="n">Image</span>
<span class="kn">import</span> <span class="nn">piexif</span>
<span class="c1"># [...]
</span><span class="n">im</span> <span class="o">=</span> <span class="n">Image</span><span class="p">.</span><span class="nb">open</span><span class="p">(</span><span class="n">img_dir</span><span class="p">)</span>
<span class="n">exif_dict</span> <span class="o">=</span> <span class="n">piexif</span><span class="p">.</span><span class="n">load</span><span class="p">(</span><span class="n">im</span><span class="p">.</span><span class="n">info</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"exif"</span><span class="p">))</span>
<span class="n">user_comment</span> <span class="o">=</span> <span class="n">exif_dict</span><span class="p">[</span><span class="s">"Exif"</span><span class="p">].</span><span class="n">get</span><span class="p">(</span><span class="n">piexif</span><span class="p">.</span><span class="n">ExifIFD</span><span class="p">.</span><span class="n">UserComment</span><span class="p">)</span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The extracted image data can be exported into a CSV file.</p>

<p><img src="/assets/images/p2h_csv_ex.webp" alt="" /></p>

<p>With that data in place, it’s simple to insert it into some HTML templates. Example code:</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
</pre></td><td class="code"><pre><span class="n">html_start_str</span> <span class="o">=</span> <span class="s">"""
&lt;!DOCTYPE html&gt;
&lt;html&gt;

&lt;head&gt;
&lt;title&gt; the_title &lt;/title&gt;
&lt;link rel="stylesheet" href="style.css"&gt;
&lt;link rel="stylesheet" href="mobile.css" media="screen and (max-device-width: 850px)" /&gt;
&lt;link rel="stylesheet" href="mobile_portrait.css" media="screen and (max-device-width: 500px)" /&gt;
&lt;/head&gt;

&lt;body id="id_text"&gt;
&lt;top&gt;&lt;/top&gt;
&lt;table&gt;
"""</span>

<span class="n">html_image_entry_temp</span> <span class="o">=</span> <span class="s">"""
&lt;tr class="content"&gt;
    &lt;td class="date"&gt;&lt;time&gt;date_text&lt;/time&gt;&lt;/td&gt;
    &lt;td class="image"&gt;&lt;a href="img_src"&gt;&lt;img src="thumbnail_src"&gt;&lt;/a&gt;&lt;p&gt;caption&lt;/p&gt;&lt;/td&gt;
&lt;/tr&gt;
image_mid = ""

html_end_str = """</span>
<span class="o">&lt;/</span><span class="n">table</span><span class="o">&gt;</span>

<span class="o">&lt;/</span><span class="n">body</span><span class="o">&gt;</span>

<span class="o">&lt;/</span><span class="n">html</span><span class="o">&gt;</span>
<span class="s">"""

# [...]
for row in data:
date = row[0]		
elem_type = row[1]		
file_name = row[2]
image_entry = html_image_entry_temp.replace("img_src", img_dir)
image_entry = image_entry.replace("thumbnail_src", thumbnail_dir)
image_entry = image_entry.replace("date_text", date)
image_entry = image_entry.replace("caption", caption)
image_mid += image_entry

# [...]

Html_file = open(title + ".html", "w")
html_str = html_start_str + image_mid + html_end_str
Html_file.write(html_str)
Html_file.close()

     </span>
</pre></td></tr></tbody></table></code></pre></figure>

<p>The final result only has two steps: (1) set images in the folder with correct EXIF metadata, and (2) run the program. Pretty easy. If there are enough images, new HTML pages will be created so that not too many images are on one page. Thumbnails will also be generated. Example page:</p>

<p><img src="/assets/images/p2h_images_example.webp" alt="" /></p>

<p>You can visit the images page
 <a href="../content/images.html">here</a> 
 . I also did a similar process process for
 <a href="../content/squawks.html">text posts</a> 
 and
 <a href="../content/scroll.html">combined</a> 
 image and text posts. All of these pages generate when the “update.py” program is run.</p>

<p>See
 <a href="https://github.com/austinpursley/austinpursley.github.io/tree/master/content">GitHub</a> 
 for code and more details.</p>]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[All of the content on this website is (so far) simple static HTML pages with CSS. This works out fine because a personal website like this does not need to be dynamic for user interaction (plus, I can’t use backend tools like PHP because I host the site on GitHub Pages ). However, manually editing HTML files can be tedious, especially if the same information is being edited in many different places. One solution for this is a static site generator . There are tools out there for static site generation, but I didn’t know that when I started this project. That ignorance plus getting carried away ended up with me programming my own mini generator with Python, where all I have to do is edit data and run the script to automatically generate HTML pages.]]></summary></entry><entry><title type="html">Song Lyrics Phoneme Swap</title><link href="http://localhost:4000/projects/verse_swap_lyrics.html" rel="alternate" type="text/html" title="Song Lyrics Phoneme Swap" /><published>2020-05-09T00:00:00-04:00</published><updated>2020-05-09T00:00:00-04:00</updated><id>http://localhost:4000/projects/verse_swap_lyrics</id><content type="html" xml:base="http://localhost:4000/projects/verse_swap_lyrics.html"><![CDATA[<p>Given a line of a famous song:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Fly me to the moon"
</code></pre></div></div>

<p>We can find the phonemes for the words with
 <a href="http://www.speech.cs.cmu.edu/cgi-bin/cmudict">CMUdict</a> 
 :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['F L AY1', 'M IY1', 'T UW1', 'DH AH0', 'M UW1 N']
</code></pre></div></div>

<p>Define some new word boundaries (in this case merging two words into one, however more combos are possible):</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['F L AY1', 'M IY1 T UW1', 'DH AH0', 'M UW1 N']
</code></pre></div></div>

<p>Replace some of the phonemes with
 <a href="https://en.wikipedia.org/wiki/Regular_expression">regex</a> 
 wildcards…</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['F .{1,3} .{1,3}', '.{1,3} .{1,3} V Y UW1', 'T UW1', 'M .{1,3} N']
</code></pre></div></div>

<p>…then search for new words that match the pattern:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>['F AH1 N D', 'R IY2 V Y UW1', 'T UW1', 'M EY1 N']
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>"Fund review to main"
</code></pre></div></div>

<p>(it can take awhile to find a combo of word boundaries and wildcards that works)</p>

<p>And there you go, the line has had some of its phonemes swapped. To continue the fun, we can do some more lines from the song:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Let me play among the stars
['L EH1 T', 'M IY1', 'P L EY1', 'AH0 M AH1 NG', 'DH AH0', 'S T AA1 R Z']
letter multiple trademarks
['L EH1 T ER0', 'M AH1 L T AH0 P AH0 L', 'T R EY1 D M AA2 R K S']

And let me see
['AH0 N D', 'L EH1 T', 'M IY1', 'S IY1']
and hot tv
['AH0 N D', 'HH AA1 T', 'T IY1 V IY1']

what spring is like
['W AH1 T', 'S P R IH1 NG', 'IH1 Z', 'L AY1 K']
arts print him like
['AA1 R T S', 'P R IH1 N T', 'HH IH1 M', 'L AY1 K']

On a Jupiter and Mars
['AA1 N', 'AH0', 'JH UW1 P AH0 T ER0', 'AH0 N D', 'M AA1 R Z']
august open the ads free
['AA1 G AH0 S T', 'OW1 P AH0 N', 'DH AH0', 'AE1 D Z', 'F R IY1']	

</code></pre></div></div>

<p>More examples:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Boulder colorado
Take a break at Yaddo*
Economics
Put it in my pocket
(*not in CMUdict, input "Yah doe" instead)
	
culture girl around oh
too country key window
end a techniques
pay town interest diet
	
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
A B C
It's easy as, 1 2 3
As simple as, do re mi
A B C, 1 2 3
Baby, you and me girl

agree see
it jersey an, UK lee
desktop oil as, poor army
agree see, UK lee
job few a procedures
	
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
Amarillo by morning
Up from San Antone
Everything that I've got
Is just what I've got on

power al oh regarding
appear advanced show now
of re things archives at
inc ice two style root on
	
</code></pre></div></div>

<p>See
 <a href="https://github.com/austinpursley/verse-python/blob/master/swap_lyrics.py">GitHub</a> 
 for related code.</p>]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[Given a line of a famous song:]]></summary></entry><entry><title type="html">CMU Dictionary and Rhyme</title><link href="http://localhost:4000/projects/verse_rhymes_and_more.html" rel="alternate" type="text/html" title="CMU Dictionary and Rhyme" /><published>2020-04-04T00:00:00-04:00</published><updated>2020-04-04T00:00:00-04:00</updated><id>http://localhost:4000/projects/verse_rhymes_and_more</id><content type="html" xml:base="http://localhost:4000/projects/verse_rhymes_and_more.html"><![CDATA[<p>This is just a casual Python project to explore using the
 <a href="http://www.speech.cs.cmu.edu/cgi-bin/cmudict">CMU Dictionary</a> 
 to find rhymes and other phonetic similarities between words. I mostly built off of the the
 <a href="https://libraries.io/pypi/pronouncing">pronouncing</a> 
 library.</p>

<p>For now I’ll just paste the code below and link
 <a href="https://github.com/austinpursley/verse-python/blob/master/rhymes_and_more.py">Github</a> 
 .</p>

<figure class="highlight"><pre><code class="language-python" data-lang="python"><table class="rouge-table"><tbody><tr><td class="gutter gl"><pre class="lineno">1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
30
31
32
33
34
35
36
37
38
39
40
41
42
43
44
45
46
47
48
49
50
51
52
53
54
55
56
57
58
59
60
61
62
63
64
65
66
67
68
69
70
71
72
73
74
75
76
77
78
79
80
81
82
83
84
85
86
87
88
89
90
91
92
93
94
95
96
97
98
99
100
101
102
103
104
105
106
107
108
109
110
111
112
113
114
115
116
117
118
119
120
121
122
123
124
125
126
127
128
129
130
131
132
133
134
135
136
137
138
139
140
141
142
143
144
145
146
147
148
149
150
151
152
153
154
155
156
157
158
159
160
161
162
163
164
165
166
167
168
169
170
171
172
173
174
175
176
177
178
179
180
181
182
183
184
185
186
187
188
189
190
191
192
193
194
195
196
197
198
199
200
201
202
203
204
205
206
207
208
209
210
211
212
213
214
215
216
217
218
219
220
221
222
223
224
225
226
227
228
229
230
231
232
233
234
235
236
237
238
239
240
241
242
243
244
245
246
247
248
249
250
251
252
253
254
255
256
257
258
259
260
261
262
263
264
265
266
267
268
269
270
271
272
273
274
275
276
277
278
279
280
281
282
283
284
285
286
287
288
289
290
291
292
293
294
295
296
297
298
299
300
301
302
303
304
305
306
307
308
309
310
311
312
313
314
315
316
317
318
319
320
321
322
323
324
325
326
327
328
329
330
331
332
333
334
335
336
337
338
339
340
341
342
343
344
345
346
347
348
349
350
351
352
353
354
355
356
357
358
359
360
361
362
363
364
365
366
367
368
369
370
371
372
373
374
375
376
377
378
379
380
381
382
383
384
385
386
387
388
389
390
391
392
393
394
395
396
397
398
399
400
401
402
403
404
405
406
407
408
409
410
411
412
413
414
415
416
417
418
419
420
421
422
423
424
425
426
427
428
429
430
431
432
433
434
435
436
437
438
439
440
441
442
443
444
445
446
447
448
449
450
451
452
453
454
455
456
457
458
459
460
461
462
463
464
465
466
467
468
469
470
471
472
473
474
475
476
477
478
479
480
481
482
483
484
485
486
487
488
489
490
491
492
493
494
495
496
497
498
499
500
501
502
503
504
505
506
507
508
509
510
511
512
513
514
515
516
517
518
519
520
521
522
523
524
525
526
527
528
529
530
531
532
533
534
535
536
537
538
539
540
541
542
543
544
545
546
547
548
549
550
551
552
553
554
555
556
557
558
559
560
561
562
563
564
565
566
567
568
569
570
571
572
573
574
575
576
577
578
579
580
581
582
583
584
585
586
587
588
589
590
591
592
593
594
595
596
597
598
599
600
601
602
603
604
605
606
607
608
609
610
611
612
613
614
615
616
617
618
619
620
621
622
623
624
625
626
627
628
629
630
631
632
633
634
635
636
637
638
639
640
641
642
643
644
645
646
647
648
649
650
651
652
653
654
655
656
657
</pre></td><td class="code"><pre><span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">import</span> <span class="nn">string</span>
<span class="kn">import</span> <span class="nn">pronouncing</span>
<span class="kn">import</span> <span class="nn">re</span>
<span class="kn">import</span> <span class="nn">itertools</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>

<span class="s">"""
    Web links for more information:
    http://www.speech.cs.cmu.edu/cgi-bin/cmudict
    https://en.wikipedia.org/wiki/Arpabet
    https://en.wikipedia.org/wiki/Rhyme
    https://en.wikipedia.org/wiki/Perfect_and_imperfect_rhymes
    https://en.wikipedia.org/wiki/Assonance
    https://www.litcharts.com/literary-devices-and-terms/slant-rhyme
 """</span>

<span class="k">def</span> <span class="nf">consonant_clusters</span><span class="p">():</span>
    <span class="s">""" Return a list of possible English consonant clusters."""</span>
    <span class="s">"""
    See the following resources for more information on consonant clusters.
    "consonant cluster: "a group of consonants which have no intervening vowel"
        https://en.wikipedia.org/wiki/Consonant_cluster
    "Two Theories of Onset Clusters", Duanmu
        http://www-personal.umich.edu/~duanmu/CR02.pdf
    "Phoneme distribution and syllable structure of entry words in the CMU
    English Pronouncing Dictionary", Yang
        http://fonetiks.info/bgyang/db/201606cmu.pdf
    "Blends, Digraphs, Trigraphs, and Other Letter Combinations"
        https://www.enchantedlearning.com/consonantblends/
    """</span>
    <span class="k">return</span> <span class="p">[</span><span class="s">'F W'</span><span class="p">,</span> <span class="s">'F R'</span><span class="p">,</span> <span class="s">'F L'</span><span class="p">,</span> <span class="s">'S W'</span><span class="p">,</span> <span class="s">'S V'</span><span class="p">,</span>
            <span class="s">'S R'</span><span class="p">,</span> <span class="s">'S L'</span><span class="p">,</span> <span class="s">'S N'</span><span class="p">,</span> <span class="s">'S M'</span><span class="p">,</span> <span class="s">'S F'</span><span class="p">,</span>
            <span class="s">'S P'</span><span class="p">,</span> <span class="s">'S T'</span><span class="p">,</span> <span class="s">'S K'</span><span class="p">,</span> <span class="s">'SH W'</span><span class="p">,</span> <span class="s">'SH R'</span><span class="p">,</span>
            <span class="s">'SH L'</span><span class="p">,</span> <span class="s">'SH N'</span><span class="p">,</span> <span class="s">'SH M'</span><span class="p">,</span> <span class="s">'TH W'</span><span class="p">,</span> <span class="s">'TH R'</span><span class="p">,</span>
            <span class="s">'V W'</span><span class="p">,</span> <span class="s">'V R'</span><span class="p">,</span> <span class="s">'V L'</span><span class="p">,</span> <span class="s">'Z W'</span><span class="p">,</span> <span class="s">'Z L'</span><span class="p">,</span>
            <span class="s">'B W'</span><span class="p">,</span> <span class="s">'B R'</span><span class="p">,</span> <span class="s">'B L'</span><span class="p">,</span> <span class="s">'D W'</span><span class="p">,</span> <span class="s">'D R'</span><span class="p">,</span>
            <span class="s">'G W'</span><span class="p">,</span> <span class="s">'G R'</span><span class="p">,</span> <span class="s">'G L'</span><span class="p">,</span> <span class="s">'P W'</span><span class="p">,</span> <span class="s">'P R'</span><span class="p">,</span>
            <span class="s">'P L'</span><span class="p">,</span> <span class="s">'T W'</span><span class="p">,</span> <span class="s">'T R'</span><span class="p">,</span> <span class="s">'K W'</span><span class="p">,</span> <span class="s">'K R'</span><span class="p">,</span>
            <span class="s">'K L'</span><span class="p">,</span> <span class="s">'L Y'</span><span class="p">,</span> <span class="s">'N Y'</span><span class="p">,</span> <span class="s">'M Y'</span><span class="p">,</span> <span class="s">'V Y'</span><span class="p">,</span>
            <span class="s">'H Y'</span><span class="p">,</span> <span class="s">'F Y'</span><span class="p">,</span> <span class="s">'S Y'</span><span class="p">,</span> <span class="s">'TH Y'</span><span class="p">,</span> <span class="s">'Z Y'</span><span class="p">,</span>
            <span class="s">'B Y'</span><span class="p">,</span> <span class="s">'D Y'</span><span class="p">,</span> <span class="s">'G Y'</span><span class="p">,</span> <span class="s">'P Y'</span><span class="p">,</span> <span class="s">'T Y'</span><span class="p">,</span>
            <span class="s">'K Y'</span><span class="p">,</span> <span class="s">'S P L'</span><span class="p">,</span> <span class="s">'S P R'</span><span class="p">,</span> <span class="s">'S T R'</span><span class="p">,</span>  <span class="s">'S K R'</span><span class="p">,</span>
            <span class="s">'S K W'</span><span class="p">]</span>


<span class="k">def</span> <span class="nf">check_if_consonant_cluster</span><span class="p">(</span><span class="n">phones</span><span class="p">):</span>
    <span class="s">"""Return True if CMUdict phonemes is a consonant cluster."""</span>
    <span class="k">return</span> <span class="n">phones</span> <span class="ow">in</span> <span class="n">consonant_clusters</span><span class="p">()</span>


<span class="k">def</span> <span class="nf">check_if_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
    <span class="s">"""Returns True if CMUdict phoneme is a vowel."""</span>
    <span class="c1"># all vowels in CMU Pronouncing Dictionary have stress number 0-2
</span>    <span class="k">return</span> <span class="n">phone</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="s">'012'</span>


<span class="k">def</span> <span class="nf">check_if_stressed_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
    <span class="s">"""Returns True if CMUdict phoneme is a stressed vowel."""</span>
    <span class="c1"># 1 or 2 indicate vowel is stressed
</span>    <span class="k">return</span> <span class="n">phone</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="s">'12'</span>


<span class="k">def</span> <span class="nf">check_if_non_stressed_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
    <span class="s">"""Returns True if CMUdict phoneme is a non-stressed vowel."""</span>
    <span class="c1"># 0 indicates vowel is unstressed
</span>    <span class="k">return</span> <span class="n">phone</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">in</span> <span class="s">'0'</span>


<span class="k">def</span> <span class="nf">check_if_consonant</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
    <span class="s">"""Returns True if CMUdict phoneme is a consonant."""</span>
    <span class="c1"># consonants do not have any stress number
</span>    <span class="k">return</span> <span class="n">phone</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="s">'012'</span>

<span class="k">def</span> <span class="nf">unique</span><span class="p">(</span><span class="n">data_list</span><span class="p">):</span>
    <span class="s">"""Removes duplicates from a list, i.e. just unique elements."""</span>
    <span class="k">return</span> <span class="nb">list</span><span class="p">(</span><span class="nb">dict</span><span class="p">.</span><span class="n">fromkeys</span><span class="p">(</span><span class="n">data_list</span><span class="p">))</span>


<span class="k">def</span> <span class="nf">all_the_same</span><span class="p">(</span><span class="n">data_list</span><span class="p">,</span> <span class="n">val</span><span class="p">):</span>
    <span class="s">"""Returns true if all elements in data_list at equal to val"""</span>
    <span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">)</span> <span class="o">&gt;</span> <span class="mi">0</span> <span class="ow">and</span> <span class="nb">len</span><span class="p">(</span><span class="n">data_list</span><span class="p">)</span> <span class="o">==</span> <span class="n">data_list</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="n">val</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">random_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="s">"""Chooses random set of CMUdict phonemes for word

    :param word: a word
    :return: CMUdict phonemes string
    """</span>
    <span class="n">all_phones</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">all_phones</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">""</span>
    <span class="n">phones</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">all_phones</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">phones</span>

<span class="k">def</span> <span class="nf">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="s">"""Chooses first set of CMUdict phonemes for word

    :param word: a word
    :return: CMUdict phonemes string
    """</span>
    <span class="n">all_phones</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">all_phones</span><span class="p">:</span>
        <span class="k">return</span> <span class="s">""</span>
    <span class="n">phones</span> <span class="o">=</span> <span class="n">all_phones</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">phones</span>

<span class="k">def</span> <span class="nf">rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">""" Returns a list of rhymes for a word.

    The conditions for this 'normal' rhyme between words are:
    (1) last stressed vowel and subsequent phonemes match
    If phones argument not given, phones/pronunciation used will default to the
    first in the list of phones returned for word. If no rhyme is found, an
    empty list is returned.

    This is the 'default' rhyme, same definition used by the pronoucning
    module for its 'rhymes' function. This is also like the shared set of
    perfect and identical rhymes, except the identical word will be removed
    from the returned rhymes list.


    :param word: a word
    :param phones: specific CMUdict phonemes string for word (default None) 
    :return: a rhyme for word
    """</span>
    
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for "</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[</span>
        <span class="n">w</span> <span class="k">for</span> <span class="n">w</span> <span class="ow">in</span>
        <span class="n">pronouncing</span><span class="p">.</span><span class="n">rhyme_lookup</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="n">pronouncing</span><span class="p">.</span><span class="n">rhyming_part</span><span class="p">(</span><span class="n">phones</span><span class="p">),</span> <span class="p">[])</span>
        <span class="k">if</span> <span class="p">(</span><span class="n">w</span> <span class="o">!=</span> <span class="n">word</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">perfect_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">""" Returns a list of perfect rhymes for a word.

    The conditions for a perfect rhyme between words are:
    (1) last stressed vowel and subsequent phonemes match
    (2) onset of last stressed syllable is different
    If phones argument not given, phones/pronunciation used will default to the 
    first in the list of phones returned for word. If no rhyme is found, an
    empty list is returned.


    :param word: a word
    :param phones: specific CMUdict phonemes string for word (default None)
    :return: a list of perfect rhymes for word
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for +"</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="n">perf_and_iden_rhymes</span> <span class="o">=</span> <span class="n">rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="p">)</span>
    <span class="n">identical_rhymes</span> <span class="o">=</span> <span class="n">identical_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="p">)</span>
    <span class="n">perfect_rhymes</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">setdiff1d</span><span class="p">(</span><span class="n">perf_and_iden_rhymes</span><span class="p">,</span> <span class="n">identical_rhymes</span><span class="p">))</span>
    <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">perfect_rhymes</span><span class="p">:</span>
        <span class="n">perfect_rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">perfect_rhymes</span>


<span class="k">def</span> <span class="nf">identical_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">""" Returns identical rhymes of word.

    The conditions for an identical rhyme between words are:
    (1) last stressed vowel and subsequent phonemes match
    (2) onset of last stressed syllable is the same
        e.g. 'leave' and 'leave', or 'leave' and 'believe'
    If phones argument not given, phones/pronunciation used will default to the 
    first in the list of phones returned for word. If no rhyme is found, an
    empty list is returned.

    The identical part of the word doesn't have to be a 'real' word.
    e.g. The phonemes for 'vection' will be used to find identical rhymes
    of 'convection' (e.g. advection) even though 'vection' is unusual/obscure.


    :param word: a word
    :param phones: specific CMUdict phonemes string for word (default None)
    :return: a list of identical rhymes for word
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for +"</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>

    <span class="n">phones_list</span> <span class="o">=</span> <span class="n">phones</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">search_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">phones_list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">phones_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">check_if_stressed_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">False</span><span class="p">:</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
            <span class="n">last_stressed_vowel_at_start</span> <span class="o">=</span> <span class="p">(</span><span class="n">i</span> <span class="o">==</span> <span class="mi">0</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">last_stressed_vowel_at_start</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
                <span class="n">search_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>
                <span class="n">search</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>
                <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span> <span class="o">+</span> <span class="s">"$"</span><span class="p">)</span>
                <span class="k">return</span> <span class="n">rhymes</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">consonant_cnt</span> <span class="o">=</span> <span class="mi">0</span>
                <span class="n">consonants</span><span class="o">=</span> <span class="s">""</span>
                <span class="n">search_start</span> <span class="o">=</span> <span class="s">""</span>
                <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
                    <span class="n">next_phone</span> <span class="o">=</span> <span class="n">phones_list</span><span class="p">[</span><span class="n">j</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
                    <span class="k">if</span> <span class="n">check_if_consonant</span><span class="p">(</span><span class="n">next_phone</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
                        <span class="n">consonant_cnt</span> <span class="o">+=</span> <span class="mi">1</span>
                        <span class="k">if</span> <span class="n">consonant_cnt</span> <span class="o">&gt;</span> <span class="mi">1</span><span class="p">:</span>
                            <span class="n">consonants</span> <span class="o">=</span> <span class="n">next_phone</span> <span class="o">+</span> <span class="s">" "</span> <span class="o">+</span> <span class="n">consonants</span>
                            <span class="k">if</span> <span class="n">check_if_consonant_cluster</span><span class="p">(</span><span class="n">consonants</span><span class="p">):</span>
                                <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">next_phone</span><span class="p">)</span>
                            <span class="k">else</span><span class="p">:</span>
                                <span class="k">break</span>
                        <span class="k">else</span><span class="p">:</span>
                            <span class="n">consonants</span> <span class="o">=</span> <span class="n">next_phone</span>
                            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">next_phone</span><span class="p">)</span>
                    <span class="k">else</span><span class="p">:</span>
                        <span class="k">if</span> <span class="n">consonant_cnt</span> <span class="o">==</span> <span class="mi">0</span><span class="p">:</span>  <span class="c1"># null onset
</span>                            <span class="c1"># Regex: vowel (AA1, EH0, ect.) or start '^'
</span>                            <span class="c1"># pretty sure all vowel start two letters...
</span>                            <span class="c1">#   (would be "((.{1,2}(0|1|2) )|^)" otherwise)
</span>                            <span class="n">search_start</span> <span class="o">=</span> <span class="s">"((..(0|1|2) )|^)"</span>
                        <span class="k">break</span>
                <span class="n">search_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>
                <span class="n">search</span> <span class="o">=</span> <span class="n">search_start</span> <span class="o">+</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span> <span class="o">+</span> <span class="s">"$"</span>
                <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span><span class="p">)</span>
                <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
                <span class="c1"># for r in rhymes:
</span>                <span class="c1">#     print(pronouncing.phones_for_word(r)[0])
</span>                <span class="k">return</span> <span class="n">rhymes</span>

<span class="k">def</span> <span class="nf">near_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">stress</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="n">consonant_tail</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="s">""" Returns a list of words that almost rhyme

    The conditions for a near rhyme between words are:
    (1) At least one of the phonemes after and including the last stressed
        syllable match, except for the case where they all do.
    If phones argument not given, phones/pronunciation used will default to the
    first in the list of phones returned for word. If no rhyme is found, an
    empty list is returned.


    :param word: a word
    :param phones: specific CMUdict phonemes string for word (default None)
    :param stress: if vowels will match stress (default True)
    :param consannt_tail: number of
    :return: a list of near rhymes for word
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for"</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>

    <span class="n">rp</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">rhyming_part</span><span class="p">(</span><span class="n">phones</span><span class="p">)</span>
    <span class="n">search_combos</span> <span class="o">=</span> <span class="n">wildcard_mix_phones_regex_searches</span><span class="p">(</span><span class="n">rp</span><span class="p">,</span> <span class="n">stress</span><span class="p">)</span>
    <span class="n">rhymes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">search</span> <span class="ow">in</span> <span class="n">search_combos</span><span class="p">:</span>
        <span class="n">rhymes</span> <span class="o">+=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span>
            <span class="n">search</span> <span class="o">+</span> <span class="s">"( .{1,3}){0,"</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">consonant_tail</span><span class="p">)</span> <span class="o">+</span> <span class="s">"}$"</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">rhymes</span><span class="p">:</span>
        <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">rhymes</span><span class="p">:</span>
            <span class="n">rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">return</span> <span class="n">rhymes</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"random general rhyme: tried all combos, didn't find anything!"</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">random_general_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">search_option</span><span class="o">=</span><span class="s">"end"</span><span class="p">):</span>
    <span class="s">""" Return a list of rhymes where a random combination of phonemes match
    
    The conditions for a general rhyme between words are:
    (1) Any possible phonetic similarity between the final stressed vowel and
        subsequent phonemes.
    If phones argument not given, phones/pronunciation used will default to the
    first in the list of phones returned for word. If no rhyme is found, an
    empty list is returned.


    :param word: a word
    :param phones: specific CMUdict phonemes string for word (default None)
    :param search_option option for regex search. (default "end")
    :return: a list of rhymes for word, where specific rhyme is random
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for +"</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="n">rp</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">rhyming_part</span><span class="p">(</span><span class="n">phones</span><span class="p">)</span>
    <span class="n">search_combos</span> <span class="o">=</span> <span class="n">wildcard_mix_phones_regex_searches</span><span class="p">(</span><span class="n">rp</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">search_combos</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">search_combos</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">search_option</span> <span class="o">==</span> <span class="s">"end"</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span> <span class="o">+</span> <span class="s">"$"</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">search_option</span> <span class="o">==</span> <span class="s">"begin"</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">"^"</span> <span class="o">+</span> <span class="n">search</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">search_option</span> <span class="o">==</span> <span class="s">"whole"</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">"^"</span> <span class="o">+</span> <span class="n">search</span> <span class="o">+</span> <span class="s">"$"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"search_option should be 'end', 'begin', or 'whole'"</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rhymes</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">rhymes</span><span class="p">:</span>
                <span class="n">rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">rhymes</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">search_combos</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">search</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"random general rhyme: tried all combos, didn't find anything!"</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[]</span>


<span class="k">def</span> <span class="nf">random_match_phones</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""Returns words that match a random combination of phonemes

    This is like a random general rhyme, however instead of just the
    last syllable portion, it's the entire word.

    :param word: word that should be in the CMU Pronouncing Dictionary
    :param phones: specific phonemes to rhyme with (default None)
    :return: a word that shares a random combinations of phonemes
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes and word don't match"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="n">search_list</span> <span class="o">=</span> <span class="n">wildcard_mix_phones_regex_searches</span><span class="p">(</span><span class="n">phones</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">search_list</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>
        <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rhymes</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">rhymes</span><span class="p">:</span>
                <span class="n">rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">rhymes</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">search</span><span class="p">)</span>
    <span class="k">print</span><span class="p">(</span><span class="s">"random general match phones: tried all combos, didn't find anything!"</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">assonance_slant_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">""" Returns slant rhymes defined by assonance i.e. matching vowels.

    The conditions for an assonance slant rhyme between words are:
    (1) The last stressed vowel and subsequent phonemes match all vowels.
    If phones argument not given, phones/pronunciation used will default to the 
    first in the list of phones returned for word. If no rhyme is found, an
    empty list is returned.

    Slant rhymes seems to have various different meanings. I went ahead and set
    the condition of having to have ALL the same vowels and different
    consonants or vice versa.

    :param word: a word
    :param phones: specific CMUdict phonemes string for word (default None)
    :return: a list of assonance slant rhymes for word
    """</span>

    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for +"</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="n">phones_list</span> <span class="o">=</span> <span class="n">phones</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">search_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">phones_list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">phones_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">check_if_non_stressed_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s">'.'</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">check_if_stressed_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s">'.'</span><span class="p">)</span> <span class="c1">#ignore stress
</span>            <span class="n">search_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>
            <span class="n">search</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span> <span class="o">+</span> <span class="s">"$"</span><span class="p">)</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">rhymes</span><span class="p">:</span>
                <span class="n">rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">rhymes</span>
        <span class="k">elif</span> <span class="n">check_if_consonant</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'.{1,3}'</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[]</span>


<span class="k">def</span> <span class="nf">consonance_slant_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">""" Returns slant rhymes defined by consonance i.e. matching consonants.

    The conditions for a consonance slant rhyme between words are:
    (1) The last stressed vowel and subsequent phonemes match all consonants.
    If phones argument not given, phones/pronunciation used will default to the 
    first in the list of phones returned for word. If no rhyme is found, an
    empty list is returned.

    Slant rhymes seems to have various different meanings. I went ahead and set
    the condition of having to have ALL the same vowels and different
    consonants or vice versa.

    :param word: a word
    :param phones: specific CMUdict phonemes string for word (default None)
    :return: a list consonance slant rhymes for word
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for +"</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="n">phones_list</span> <span class="o">=</span> <span class="n">phones</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">search_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">phones_list</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">,</span> <span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">phones_list</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">check_if_stressed_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'.{1,3}'</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">all_the_same</span><span class="p">(</span><span class="n">search_list</span><span class="p">,</span> <span class="s">'.{1,3}'</span><span class="p">)</span> <span class="ow">is</span> <span class="bp">True</span><span class="p">:</span>
                <span class="k">break</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>
            <span class="n">search</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span> <span class="o">+</span> <span class="s">"$"</span><span class="p">)</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">rhymes</span><span class="p">:</span>
                <span class="n">rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">rhymes</span>
        <span class="k">elif</span> <span class="n">check_if_non_stressed_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'.{1,3}'</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">check_if_consonant</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[]</span>

<span class="k">def</span> <span class="nf">assonance</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">search_direction</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">match_limit</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""Returns words that have assonance

    :param word: word that should be in the CMU Pronouncing Dictionary
    :param phones: specific phonemes to rhyme with (default None)
    :param match_limit: limit number of words to return
    :return: a word that has repition of vowel sounds to input word
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="n">phones</span> <span class="o">+</span> <span class="s">" not phones for +"</span> <span class="o">+</span> <span class="n">word</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="n">phones_list</span> <span class="o">=</span> <span class="n">phones</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">search_direction</span> <span class="o">==</span> <span class="s">"backward"</span><span class="p">:</span>
        <span class="n">phones_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>
    <span class="n">search_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">match_cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">phone</span> <span class="ow">in</span> <span class="n">phones_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">check_if_consonant</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'.'</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">check_if_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
            <span class="n">match_cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">match_limit</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">match_cnt</span> <span class="o">==</span> <span class="n">match_limit</span><span class="p">):</span>
                <span class="k">break</span>
    <span class="k">if</span> <span class="n">search_direction</span> <span class="o">==</span> <span class="s">"backward"</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">())</span> <span class="o">+</span> <span class="s">"$"</span>
    <span class="k">elif</span> <span class="n">search_direction</span> <span class="o">==</span> <span class="s">"forward"</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="s">"^"</span> <span class="o">+</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>

    <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span><span class="p">)</span>
    <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">rhymes</span><span class="p">:</span>
        <span class="n">rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">rhymes</span>


<span class="k">def</span> <span class="nf">consonance</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="n">phones</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">search_direction</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="n">match_limit</span><span class="o">=</span><span class="bp">None</span><span class="p">):</span>
    <span class="s">"""Returns words that have consonance

    :param word: word that should be in the CMU Pronouncing Dictionary
    :param phones: specific phonemes to rhyme with (default None)
    :param match_limit: limit number of words to return
    :return: a word that has repition of consonance sounds to input word
    """</span>
    <span class="k">if</span> <span class="n">phones</span> <span class="ow">is</span> <span class="bp">None</span><span class="p">:</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">first_phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="o">==</span> <span class="s">""</span><span class="p">:</span>
            <span class="k">return</span> <span class="p">[]</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">phones</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
            <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes and word don't match"</span><span class="p">)</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">phones</span><span class="p">:</span>
        <span class="k">raise</span> <span class="nb">ValueError</span><span class="p">(</span><span class="s">"phonemes string is empty"</span><span class="p">)</span>
    <span class="n">phones_list</span> <span class="o">=</span> <span class="n">phones</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="k">if</span> <span class="n">search_direction</span> <span class="o">==</span> <span class="s">"backward"</span><span class="p">:</span>
        <span class="n">phones_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">()</span>
    <span class="n">search_list</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">match_cnt</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">for</span> <span class="n">phone</span> <span class="ow">in</span> <span class="n">phones_list</span><span class="p">:</span>
        <span class="k">if</span> <span class="n">check_if_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="s">'.{1,3}'</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">check_if_consonant</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">search_list</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
            <span class="n">match_cnt</span> <span class="o">+=</span> <span class="mi">1</span>
            <span class="k">if</span> <span class="p">(</span><span class="n">match_limit</span> <span class="ow">is</span> <span class="ow">not</span> <span class="bp">None</span><span class="p">)</span> <span class="ow">and</span> <span class="p">(</span><span class="n">match_cnt</span> <span class="o">==</span> <span class="n">match_limit</span><span class="p">):</span>
                <span class="k">break</span>
    <span class="k">if</span> <span class="n">search_direction</span> <span class="o">==</span> <span class="s">"backward"</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">.</span><span class="n">reverse</span><span class="p">())</span> <span class="o">+</span> <span class="s">"$"</span>
    <span class="k">elif</span> <span class="n">search_direction</span> <span class="o">==</span> <span class="s">"forward"</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="s">"^"</span> <span class="o">+</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="n">search</span> <span class="o">=</span> <span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="n">search_list</span><span class="p">)</span>

    <span class="n">rhymes</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="n">search</span><span class="p">)</span>
    <span class="n">rhymes</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
    <span class="k">if</span> <span class="n">word</span> <span class="ow">in</span> <span class="n">rhymes</span><span class="p">:</span>
        <span class="n">rhymes</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">rhymes</span>


<span class="k">def</span> <span class="nf">alliteration</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">consonance</span><span class="p">(</span><span class="n">word</span><span class="p">,</span> <span class="s">"forward"</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">wildcard_mix_phones_regex_searches</span><span class="p">(</span><span class="n">phones</span><span class="p">,</span> <span class="n">stress</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="s">"""Generates all combinations of regex strings where phoneme in 'phones' is a wildcard ('.')

    e.g. ['HH IY1 R'],['HH IY1 .{1,3}'],['HH .{1,3} R'],
        ['.{1,3} IY1 R'], ...['.{1,3} .{1,3} .{1,3}']


    :param phones: CMU Pronouncing Dictionary phonemes string
    :param stress: if stress portion of vowel is included or nont (a '.')
    :return: list of regex search strings where phonemes replaced with wildcard
    """</span>
    <span class="n">phones_list</span> <span class="o">=</span> <span class="n">phones</span><span class="p">.</span><span class="n">split</span><span class="p">()</span>
    <span class="n">product_factors</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">phone</span> <span class="ow">in</span> <span class="n">phones_list</span><span class="p">:</span>
        <span class="n">flist</span> <span class="o">=</span> <span class="p">[</span><span class="s">'.{1,3}'</span><span class="p">]</span>
        <span class="k">if</span> <span class="n">stress</span> <span class="ow">is</span> <span class="bp">False</span> <span class="ow">and</span> <span class="n">check_if_vowel</span><span class="p">(</span><span class="n">phone</span><span class="p">):</span>
            <span class="n">flist</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">[:</span><span class="mi">2</span><span class="p">]</span><span class="o">+</span><span class="s">'.'</span><span class="p">)</span>  <span class="c1"># ignore stress
</span>        <span class="k">else</span><span class="p">:</span>
            <span class="n">flist</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
        <span class="n">product_factors</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">flist</span><span class="p">)</span>
    <span class="n">combos</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="n">itertools</span><span class="p">.</span><span class="n">product</span><span class="p">(</span><span class="o">*</span><span class="n">product_factors</span><span class="p">))</span>
    <span class="n">combos</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">combos</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>  <span class="c1"># should be case where ['.', '.', ... '.']
</span>    <span class="n">search_combos</span> <span class="o">=</span> <span class="p">[</span><span class="s">' '</span><span class="p">.</span><span class="n">join</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="n">item</span><span class="p">))</span> <span class="k">for</span> <span class="n">item</span> <span class="ow">in</span> <span class="n">combos</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">search_combos</span>

<span class="k">def</span> <span class="nf">rhyme_same_stress</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="n">timeout_timer</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="c1"># print('in the stress loop')
</span>    <span class="k">while</span><span class="p">(</span><span class="bp">True</span><span class="p">):</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="n">phone</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">phones</span><span class="p">)</span>
        <span class="n">word_stress</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">stresses</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
        <span class="n">rhyme</span> <span class="o">=</span> <span class="n">rhyme_type_random</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="n">phones</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">phones_for_word</span><span class="p">(</span><span class="n">rhyme</span><span class="p">)</span>
        <span class="k">for</span> <span class="n">phone</span> <span class="ow">in</span> <span class="n">phones</span><span class="p">:</span>
            <span class="n">rhyme_stress</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">stresses</span><span class="p">(</span><span class="n">phone</span><span class="p">)</span>
            <span class="k">if</span> <span class="n">word_stress</span> <span class="o">==</span> <span class="n">rhyme_stress</span><span class="p">:</span>
                <span class="k">return</span> <span class="n">rhyme</span>
        <span class="k">print</span><span class="p">(</span><span class="n">timeout_timer</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">timeout_timer</span> <span class="o">==</span> <span class="mi">10</span><span class="p">:</span>
            <span class="k">return</span> <span class="n">rhyme</span>
        <span class="n">timeout_timer</span> <span class="o">+=</span> <span class="mi">1</span>

<span class="k">def</span> <span class="nf">sim_word_for_phones</span><span class="p">(</span><span class="n">phones</span><span class="p">,</span> <span class="n">word_list</span><span class="o">=</span><span class="p">[],</span> <span class="n">sim_perc</span> <span class="o">=</span> <span class="mf">0.25</span><span class="p">):</span>
	<span class="s">"""Finds a word that has shared phonemes to input phonemes

	:param phones: CMU Pronouncing Dictionary phonemes string
	:param word_list: list of words to limit search to
	:sim_perc: threshold for similarity between phones and words in words_list
	:return: word that has number of phonemes the same as phones
	"""</span>
	<span class="n">search_combos</span> <span class="o">=</span> <span class="n">wildcard_mix_phones_regex_searches</span><span class="p">(</span><span class="n">phones</span><span class="p">)</span>
	<span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">search_combos</span><span class="p">)</span>
	<span class="k">for</span> <span class="n">sch</span> <span class="ow">in</span> <span class="n">search_combos</span><span class="p">:</span>
		<span class="n">sch_list</span> <span class="o">=</span> <span class="n">sch</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)</span>
		<span class="k">if</span> <span class="n">sch_list</span><span class="p">.</span><span class="n">count</span><span class="p">(</span><span class="s">".{1,3}"</span><span class="p">)</span> <span class="o">&lt;</span> <span class="p">(</span><span class="mi">1</span><span class="o">-</span><span class="n">sim_perc</span><span class="p">)</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">sch_list</span><span class="p">):</span>
			<span class="n">matches</span> <span class="o">=</span> <span class="n">pronouncing</span><span class="p">.</span><span class="n">search</span><span class="p">(</span><span class="s">"^"</span> <span class="o">+</span> <span class="n">sch</span> <span class="o">+</span> <span class="s">"$"</span><span class="p">)</span>
			<span class="k">if</span> <span class="n">matches</span><span class="p">:</span>
				<span class="n">matches</span> <span class="o">=</span> <span class="n">unique</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
				<span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">matches</span><span class="p">)</span>
				<span class="k">for</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">matches</span><span class="p">:</span>
						<span class="k">if</span> <span class="n">word_list</span><span class="p">:</span>
							<span class="k">if</span> <span class="n">m</span> <span class="ow">in</span> <span class="n">word_list</span><span class="p">:</span>
								<span class="k">return</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
						<span class="k">else</span><span class="p">:</span>
							<span class="k">return</span><span class="p">(</span><span class="n">m</span><span class="p">)</span>
	<span class="k">return</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">rhyme_type_random</span><span class="p">(</span><span class="n">word</span><span class="p">):</span>
    <span class="n">rhyme_types</span> <span class="o">=</span> <span class="p">[</span><span class="s">'perfect'</span><span class="p">,</span> <span class="s">'identical'</span><span class="p">,</span> <span class="s">'random_match_phones'</span><span class="p">,</span> <span class="s">'random_general'</span><span class="p">,</span>
                   <span class="s">'assonance'</span><span class="p">,</span> <span class="s">'consonance'</span><span class="p">,</span> <span class="s">'slant_assonance'</span><span class="p">,</span> <span class="s">'slant_consonance'</span><span class="p">]</span>
    <span class="n">rhymes</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">while</span> <span class="n">rhyme_types</span><span class="p">:</span>
        <span class="n">rt</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">rhyme_types</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'perfect'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">perfect_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'identical'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">identical_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'random_match_phones'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">random_match_phones</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'random_general'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">random_general_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'assonance'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">assonance</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'consonance'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">consonance</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'slant_assonance'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">assonance_slant_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">elif</span> <span class="n">rt</span> <span class="o">==</span> <span class="s">'slant_consonance'</span><span class="p">:</span>
            <span class="n">rhymes</span> <span class="o">=</span> <span class="n">consonance_slant_rhyme</span><span class="p">(</span><span class="n">word</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">rhymes</span><span class="p">:</span>
            <span class="n">a_rhyme</span> <span class="o">=</span> <span class="n">random</span><span class="p">.</span><span class="n">choice</span><span class="p">(</span><span class="n">rhymes</span><span class="p">)</span>
            <span class="k">return</span> <span class="n">a_rhyme</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">rhyme_types</span><span class="p">.</span><span class="n">remove</span><span class="p">(</span><span class="n">rt</span><span class="p">)</span>
    <span class="k">return</span> <span class="p">[]</span>
	
</pre></td></tr></tbody></table></code></pre></figure>]]></content><author><name></name></author><category term="projects" /><category term="project" /><summary type="html"><![CDATA[This is just a casual Python project to explore using the CMU Dictionary to find rhymes and other phonetic similarities between words. I mostly built off of the the pronouncing library.]]></summary></entry></feed>